{"ast":null,"code":"import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8Array(output);\n}","map":{"version":3,"names":["allocUnsafe","asUint8Array","concat","arrays","length","reduce","acc","curr","output","offset","arr","set"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/uint8arrays/esm/src/concat.js"],"sourcesContent":["import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8Array(output);\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,YAAY;AACxC,SAASC,YAAY,QAAQ,yBAAyB;AACtD,OAAO,SAASC,MAAM,CAACC,MAAM,EAAEC,MAAM,EAAE;EACrC,IAAI,CAACA,MAAM,EAAE;IACXA,MAAM,GAAGD,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACH,MAAM,EAAE,CAAC,CAAC;EAC7D;EACA,MAAMI,MAAM,GAAGR,WAAW,CAACI,MAAM,CAAC;EAClC,IAAIK,MAAM,GAAG,CAAC;EACd,KAAK,MAAMC,GAAG,IAAIP,MAAM,EAAE;IACxBK,MAAM,CAACG,GAAG,CAACD,GAAG,EAAED,MAAM,CAAC;IACvBA,MAAM,IAAIC,GAAG,CAACN,MAAM;EACtB;EACA,OAAOH,YAAY,CAACO,MAAM,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}