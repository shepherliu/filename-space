{"ast":null,"code":"require(\"core-js/modules/es.typed-array.find-last.js\");\nrequire(\"core-js/modules/es.typed-array.find-last-index.js\");\n/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n  /**\n   * Creates an instance of Rabin.\n   * @param { import(\"./../dist/rabin-wasm\") } asModule\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param {number} polynomial\n   * @memberof Rabin\n   */\n  constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);\n    this.polynomial = polynomial;\n  }\n\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n  fingerprint(buf) {\n    const {\n      __retain,\n      __release,\n      __allocArray,\n      __getInt32Array,\n      Int32Array_ID,\n      Uint8Array_ID\n    } = this.asModule;\n    const lengths = new Int32Array(Math.ceil(buf.length / this.min));\n    const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));\n    const pointer = __retain(__allocArray(Uint8Array_ID, buf));\n    const out = this.rabin.fingerprint(pointer, lengthsPtr);\n    const processed = __getInt32Array(out);\n    __release(pointer);\n    __release(lengthsPtr);\n    const end = processed.indexOf(0);\n    return end >= 0 ? processed.subarray(0, end) : processed;\n  }\n}\nmodule.exports = Rabin;","map":{"version":3,"names":["Rabin","constructor","asModule","bits","min","max","windowSize","polynomial","rabin","fingerprint","buf","__retain","__release","__allocArray","__getInt32Array","Int32Array_ID","Uint8Array_ID","lengths","Int32Array","Math","ceil","length","lengthsPtr","pointer","out","processed","end","indexOf","subarray","module","exports"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/rabin-wasm/src/rabin.js"],"sourcesContent":["/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param { import(\"./../dist/rabin-wasm\") } asModule\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param {number} polynomial\n     * @memberof Rabin\n     */\n    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial)\n        this.polynomial = polynomial\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const {\n            __retain,\n            __release,\n            __allocArray,\n            __getInt32Array,\n            Int32Array_ID,\n            Uint8Array_ID\n        } = this.asModule\n\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths))\n        const pointer = __retain(__allocArray(Uint8Array_ID, buf))\n\n        const out = this.rabin.fingerprint(pointer, lengthsPtr)\n        const processed = __getInt32Array(out)\n\n        __release(pointer)\n        __release(lengthsPtr)\n\n        const end = processed.indexOf(0);\n        return end >= 0 ? processed.subarray(0, end) : processed;\n    }\n}\n\nmodule.exports = Rabin"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,CAAC;EACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,QAAQ,EAAEC,IAAI,GAAG,EAAE,EAAEC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAEC,GAAG,GAAG,EAAE,GAAG,IAAI,EAAEC,UAAU,GAAG,EAAE,EAAEC,UAAU,EAAE;IAC3F,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACM,KAAK,GAAG,IAAIN,QAAQ,CAACF,KAAK,CAACG,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAEC,UAAU,CAAC;IACvE,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,CAACC,GAAG,EAAE;IACb,MAAM;MACFC,QAAQ;MACRC,SAAS;MACTC,YAAY;MACZC,eAAe;MACfC,aAAa;MACbC;IACJ,CAAC,GAAG,IAAI,CAACd,QAAQ;IAEjB,MAAMe,OAAO,GAAG,IAAIC,UAAU,CAACC,IAAI,CAACC,IAAI,CAACV,GAAG,CAACW,MAAM,GAAC,IAAI,CAACjB,GAAG,CAAC,CAAC;IAC9D,MAAMkB,UAAU,GAAGX,QAAQ,CAACE,YAAY,CAACE,aAAa,EAAEE,OAAO,CAAC,CAAC;IACjE,MAAMM,OAAO,GAAGZ,QAAQ,CAACE,YAAY,CAACG,aAAa,EAAEN,GAAG,CAAC,CAAC;IAE1D,MAAMc,GAAG,GAAG,IAAI,CAAChB,KAAK,CAACC,WAAW,CAACc,OAAO,EAAED,UAAU,CAAC;IACvD,MAAMG,SAAS,GAAGX,eAAe,CAACU,GAAG,CAAC;IAEtCZ,SAAS,CAACW,OAAO,CAAC;IAClBX,SAAS,CAACU,UAAU,CAAC;IAErB,MAAMI,GAAG,GAAGD,SAAS,CAACE,OAAO,CAAC,CAAC,CAAC;IAChC,OAAOD,GAAG,IAAI,CAAC,GAAGD,SAAS,CAACG,QAAQ,CAAC,CAAC,EAAEF,GAAG,CAAC,GAAGD,SAAS;EAC5D;AACJ;AAEAI,MAAM,CAACC,OAAO,GAAG9B,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}