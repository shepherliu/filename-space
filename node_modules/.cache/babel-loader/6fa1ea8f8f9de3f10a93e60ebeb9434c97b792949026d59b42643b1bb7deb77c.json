{"ast":null,"code":"import errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport { encode, prepare } from '@ipld/dag-pb';\nimport parallelBatch from 'it-parallel-batch';\nimport * as rawCodec from 'multiformats/codecs/raw';\nimport * as dagPb from '@ipld/dag-pb';\nimport dagFlat from './flat.js';\nimport dagBalanced from './balanced.js';\nimport dagTrickle from './trickle.js';\nimport bufferImporterFn from './buffer-importer.js';\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = bufferImporterFn;\n  }\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = encode(prepare({\n          Data: leaf.unixfs.marshal()\n        }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\nexport default fileBuilder;","map":{"version":3,"names":["errCode","UnixFS","persist","encode","prepare","parallelBatch","rawCodec","dagPb","dagFlat","dagBalanced","dagTrickle","bufferImporterFn","dagBuilders","flat","balanced","trickle","buildFileBatch","file","blockstore","options","count","previous","bufferImporter","entry","blockWriteConcurrency","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","mtime","undefined","mode","buffer","get","cid","unixfs","type","data","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","code","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/index.js"],"sourcesContent":["import errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport parallelBatch from 'it-parallel-batch';\nimport * as rawCodec from 'multiformats/codecs/raw';\nimport * as dagPb from '@ipld/dag-pb';\nimport dagFlat from './flat.js';\nimport dagBalanced from './balanced.js';\nimport dagTrickle from './trickle.js';\nimport bufferImporterFn from './buffer-importer.js';\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = bufferImporterFn;\n  }\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = encode(prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\nexport default fileBuilder;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,MAAM,QAAQ,aAAa;AACpC,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,SACEC,MAAM,EACNC,OAAO,QACF,cAAc;AACrB,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAO,KAAKC,QAAQ,MAAM,yBAAyB;AACnD,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,gBAAgB,MAAM,sBAAsB;AACnD,MAAMC,WAAW,GAAG;EAClBC,IAAI,EAAEL,OAAO;EACbM,QAAQ,EAAEL,WAAW;EACrBM,OAAO,EAAEL;AACX,CAAC;AACD,gBAAgBM,cAAc,CAACC,IAAI,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACxD,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,QAAQ;EACZ,IAAIC,cAAc;EAClB,IAAI,OAAOH,OAAO,CAACG,cAAc,KAAK,UAAU,EAAE;IAChDA,cAAc,GAAGH,OAAO,CAACG,cAAc;EACzC,CAAC,MAAM;IACLA,cAAc,GAAGX,gBAAgB;EACnC;EACA,WAAW,MAAMY,KAAK,IAAIlB,aAAa,CAACiB,cAAc,CAACL,IAAI,EAAEC,UAAU,EAAEC,OAAO,CAAC,EAAEA,OAAO,CAACK,qBAAqB,CAAC,EAAE;IACjHJ,KAAK,EAAE;IACP,IAAIA,KAAK,KAAK,CAAC,EAAE;MACfC,QAAQ,GAAGE,KAAK;MAChB;IACF,CAAC,MAAM,IAAIH,KAAK,KAAK,CAAC,IAAIC,QAAQ,EAAE;MAClC,MAAMA,QAAQ;MACdA,QAAQ,GAAG,IAAI;IACjB;IACA,MAAME,KAAK;EACb;EACA,IAAIF,QAAQ,EAAE;IACZA,QAAQ,CAACI,MAAM,GAAG,IAAI;IACtB,MAAMJ,QAAQ;EAChB;AACF;AACA,MAAMK,MAAM,GAAG,CAACT,IAAI,EAAEC,UAAU,EAAEC,OAAO,KAAK;EAC5C,eAAeQ,OAAO,CAACC,MAAM,EAAE;IAC7B,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,IAAID,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM,IAAIN,OAAO,CAACW,sBAAsB,EAAE;MAC7E,MAAMC,IAAI,GAAGH,MAAM,CAAC,CAAC,CAAC;MACtB,IAAIX,IAAI,CAACe,KAAK,KAAKC,SAAS,IAAIhB,IAAI,CAACiB,IAAI,KAAKD,SAAS,EAAE;QACvD,IAAIE,MAAM,GAAG,MAAMjB,UAAU,CAACkB,GAAG,CAACL,IAAI,CAACM,GAAG,CAAC;QAC3CN,IAAI,CAACO,MAAM,GAAG,IAAIrC,MAAM,CAAC;UACvBsC,IAAI,EAAE,MAAM;UACZP,KAAK,EAAEf,IAAI,CAACe,KAAK;UACjBE,IAAI,EAAEjB,IAAI,CAACiB,IAAI;UACfM,IAAI,EAAEL;QACR,CAAC,CAAC;QACFA,MAAM,GAAGhC,MAAM,CAACC,OAAO,CAAC;UAAEqC,IAAI,EAAEV,IAAI,CAACO,MAAM,CAACI,OAAO;QAAG,CAAC,CAAC,CAAC;QACzDX,IAAI,CAACM,GAAG,GAAG,MAAMnC,OAAO,CAACiC,MAAM,EAAEjB,UAAU,EAAE;UAC3C,GAAGC,OAAO;UACVwB,KAAK,EAAEpC,KAAK;UACZqC,MAAM,EAAEzB,OAAO,CAACyB,MAAM;UACtBC,UAAU,EAAE1B,OAAO,CAAC0B;QACtB,CAAC,CAAC;QACFd,IAAI,CAACe,IAAI,GAAGX,MAAM,CAACN,MAAM;MAC3B;MACA,OAAO;QACLQ,GAAG,EAAEN,IAAI,CAACM,GAAG;QACbU,IAAI,EAAE9B,IAAI,CAAC8B,IAAI;QACfT,MAAM,EAAEP,IAAI,CAACO,MAAM;QACnBQ,IAAI,EAAEf,IAAI,CAACe;MACb,CAAC;IACH;IACA,MAAME,CAAC,GAAG,IAAI/C,MAAM,CAAC;MACnBsC,IAAI,EAAE,MAAM;MACZP,KAAK,EAAEf,IAAI,CAACe,KAAK;MACjBE,IAAI,EAAEjB,IAAI,CAACiB;IACb,CAAC,CAAC;IACF,MAAMe,KAAK,GAAGrB,MAAM,CAACsB,MAAM,CAACnB,IAAI,IAAI;MAClC,IAAIA,IAAI,CAACM,GAAG,CAACc,IAAI,KAAK7C,QAAQ,CAAC6C,IAAI,IAAIpB,IAAI,CAACe,IAAI,EAAE;QAChD,OAAO,IAAI;MACb;MACA,IAAIf,IAAI,CAACO,MAAM,IAAI,CAACP,IAAI,CAACO,MAAM,CAACE,IAAI,IAAIT,IAAI,CAACO,MAAM,CAACc,QAAQ,EAAE,EAAE;QAC9D,OAAO,IAAI;MACb;MACA,OAAOC,OAAO,CAACtB,IAAI,CAACO,MAAM,IAAIP,IAAI,CAACO,MAAM,CAACE,IAAI,IAAIT,IAAI,CAACO,MAAM,CAACE,IAAI,CAACX,MAAM,CAAC;IAC5E,CAAC,CAAC,CAACyB,GAAG,CAACvB,IAAI,IAAI;MACb,IAAIA,IAAI,CAACM,GAAG,CAACc,IAAI,KAAK7C,QAAQ,CAAC6C,IAAI,EAAE;QACnCH,CAAC,CAACO,YAAY,CAACxB,IAAI,CAACe,IAAI,CAAC;QACzB,OAAO;UACLU,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE1B,IAAI,CAACe,IAAI;UAChBY,IAAI,EAAE3B,IAAI,CAACM;QACb,CAAC;MACH;MACA,IAAI,CAACN,IAAI,CAACO,MAAM,IAAI,CAACP,IAAI,CAACO,MAAM,CAACE,IAAI,EAAE;QACrCQ,CAAC,CAACO,YAAY,CAACxB,IAAI,CAACO,MAAM,IAAIP,IAAI,CAACO,MAAM,CAACc,QAAQ,EAAE,IAAI,CAAC,CAAC;MAC5D,CAAC,MAAM;QACLJ,CAAC,CAACO,YAAY,CAACxB,IAAI,CAACO,MAAM,CAACE,IAAI,CAACX,MAAM,CAAC;MACzC;MACA,OAAO;QACL2B,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE1B,IAAI,CAACe,IAAI;QAChBY,IAAI,EAAE3B,IAAI,CAACM;MACb,CAAC;IACH,CAAC,CAAC;IACF,MAAMsB,IAAI,GAAG;MACXlB,IAAI,EAAEO,CAAC,CAACN,OAAO,EAAE;MACjBkB,KAAK,EAAEX;IACT,CAAC;IACD,MAAMd,MAAM,GAAGhC,MAAM,CAACC,OAAO,CAACuD,IAAI,CAAC,CAAC;IACpC,MAAMtB,GAAG,GAAG,MAAMnC,OAAO,CAACiC,MAAM,EAAEjB,UAAU,EAAEC,OAAO,CAAC;IACtD,OAAO;MACLkB,GAAG;MACHU,IAAI,EAAE9B,IAAI,CAAC8B,IAAI;MACfT,MAAM,EAAEU,CAAC;MACTF,IAAI,EAAEX,MAAM,CAACN,MAAM,GAAG8B,IAAI,CAACC,KAAK,CAAClC,MAAM,CAAC,CAACmC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACL,KAAK,EAAE,CAAC;IAC5E,CAAC;EACH;EACA,OAAO9B,OAAO;AAChB,CAAC;AACD,SAASoC,WAAW,CAAC9C,IAAI,EAAE+C,KAAK,EAAE7C,OAAO,EAAE;EACzC,MAAM8C,UAAU,GAAGrD,WAAW,CAACO,OAAO,CAAC+C,QAAQ,CAAC;EAChD,IAAI,CAACD,UAAU,EAAE;IACf,MAAMjE,OAAO,CAAC,IAAImE,KAAK,CAAE,yCAAyChD,OAAO,CAAC+C,QAAU,EAAC,CAAC,EAAE,kBAAkB,CAAC;EAC7G;EACA,OAAOD,UAAU,CAACjD,cAAc,CAACC,IAAI,EAAE+C,KAAK,EAAE7C,OAAO,CAAC,EAAEO,MAAM,CAACT,IAAI,EAAE+C,KAAK,EAAE7C,OAAO,CAAC,EAAEA,OAAO,CAAC;AAChG;AACA,eAAe4C,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}