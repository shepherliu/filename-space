{"ast":null,"code":"import DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\nasync function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n  const parent = newDir.parent;\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found');\n      }\n      await parent.put(newDir.parentKey, newDir);\n    }\n    return flatToShard(newDir, parent, threshold, options);\n  }\n  return newDir;\n}\nasync function convertToShard(oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n  for await (const {\n    key,\n    child\n  } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n  return newDir;\n}\nexport default flatToShard;","map":{"version":3,"names":["DirSharded","DirFlat","flatToShard","child","dir","threshold","options","newDir","directChildrenCount","convertToShard","parent","parentKey","Error","put","oldDir","root","path","dirty","flat","mtime","mode","key","eachChildSeries"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/flat-to-shard.js"],"sourcesContent":["import DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\nasync function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n  const parent = newDir.parent;\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found');\n      }\n      await parent.put(newDir.parentKey, newDir);\n    }\n    return flatToShard(newDir, parent, threshold, options);\n  }\n  return newDir;\n}\nasync function convertToShard(oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n  for await (const {key, child} of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n  return newDir;\n}\nexport default flatToShard;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,OAAO,MAAM,eAAe;AACnC,eAAeC,WAAW,CAACC,KAAK,EAAEC,GAAG,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACzD,IAAIC,MAAM,GAAGH,GAAG;EAChB,IAAIA,GAAG,YAAYH,OAAO,IAAIG,GAAG,CAACI,mBAAmB,EAAE,IAAIH,SAAS,EAAE;IACpEE,MAAM,GAAG,MAAME,cAAc,CAACL,GAAG,EAAEE,OAAO,CAAC;EAC7C;EACA,MAAMI,MAAM,GAAGH,MAAM,CAACG,MAAM;EAC5B,IAAIA,MAAM,EAAE;IACV,IAAIH,MAAM,KAAKH,GAAG,EAAE;MAClB,IAAID,KAAK,EAAE;QACTA,KAAK,CAACO,MAAM,GAAGH,MAAM;MACvB;MACA,IAAI,CAACA,MAAM,CAACI,SAAS,EAAE;QACrB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAMF,MAAM,CAACG,GAAG,CAACN,MAAM,CAACI,SAAS,EAAEJ,MAAM,CAAC;IAC5C;IACA,OAAOL,WAAW,CAACK,MAAM,EAAEG,MAAM,EAAEL,SAAS,EAAEC,OAAO,CAAC;EACxD;EACA,OAAOC,MAAM;AACf;AACA,eAAeE,cAAc,CAACK,MAAM,EAAER,OAAO,EAAE;EAC7C,MAAMC,MAAM,GAAG,IAAIP,UAAU,CAAC;IAC5Be,IAAI,EAAED,MAAM,CAACC,IAAI;IACjBX,GAAG,EAAE,IAAI;IACTM,MAAM,EAAEI,MAAM,CAACJ,MAAM;IACrBC,SAAS,EAAEG,MAAM,CAACH,SAAS;IAC3BK,IAAI,EAAEF,MAAM,CAACE,IAAI;IACjBC,KAAK,EAAEH,MAAM,CAACG,KAAK;IACnBC,IAAI,EAAE,KAAK;IACXC,KAAK,EAAEL,MAAM,CAACK,KAAK;IACnBC,IAAI,EAAEN,MAAM,CAACM;EACf,CAAC,EAAEd,OAAO,CAAC;EACX,WAAW,MAAM;IAACe,GAAG;IAAElB;EAAK,CAAC,IAAIW,MAAM,CAACQ,eAAe,EAAE,EAAE;IACzD,MAAMf,MAAM,CAACM,GAAG,CAACQ,GAAG,EAAElB,KAAK,CAAC;EAC9B;EACA,OAAOI,MAAM;AACf;AACA,eAAeL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}