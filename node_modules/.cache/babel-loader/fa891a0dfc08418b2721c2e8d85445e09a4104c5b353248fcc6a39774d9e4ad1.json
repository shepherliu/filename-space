{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Bucket, createHAMT } from 'hamt-sharding';\nimport { decode } from '@ipld/dag-pb';\nimport { murmur3128 } from '@multiformats/murmur3';\nconst hashFn = async function (buf) {\n  return (await murmur3128.encode(buf)).slice(0, 8).reverse();\n};\nconst addLinksToHamtBucket = (links, bucket, rootBucket) => {\n  return Promise.all(links.map(link => {\n    if (link.Name == null) {\n      throw new Error('Unexpected Link without a Name');\n    }\n    if (link.Name.length === 2) {\n      const pos = parseInt(link.Name, 16);\n      return bucket._putObjectAt(pos, new Bucket({\n        hash: rootBucket._options.hash,\n        bits: rootBucket._options.bits\n      }, bucket, pos));\n    }\n    return rootBucket.put(link.Name.substring(2), true);\n  }));\n};\nconst toPrefix = position => {\n  return position.toString(16).toUpperCase().padStart(2, '0').substring(0, 2);\n};\nconst toBucketPath = position => {\n  let bucket = position.bucket;\n  const path = [];\n  while (bucket._parent) {\n    path.push(bucket);\n    bucket = bucket._parent;\n  }\n  path.push(bucket);\n  return path.reverse();\n};\nconst findShardCid = async (node, name, blockstore, context, options) => {\n  if (!context) {\n    const rootBucket = createHAMT({\n      hashFn\n    });\n    context = {\n      rootBucket,\n      hamtDepth: 1,\n      lastBucket: rootBucket\n    };\n  }\n  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);\n  const position = await context.rootBucket._findNewBucketAndPos(name);\n  let prefix = toPrefix(position.pos);\n  const bucketPath = toBucketPath(position);\n  if (bucketPath.length > context.hamtDepth) {\n    context.lastBucket = bucketPath[context.hamtDepth];\n    prefix = toPrefix(context.lastBucket._posAtParent);\n  }\n  const link = node.Links.find(link => {\n    if (link.Name == null) {\n      return false;\n    }\n    const entryPrefix = link.Name.substring(0, 2);\n    const entryName = link.Name.substring(2);\n    if (entryPrefix !== prefix) {\n      return false;\n    }\n    if (entryName && entryName !== name) {\n      return false;\n    }\n    return true;\n  });\n  if (!link) {\n    return null;\n  }\n  if (link.Name != null && link.Name.substring(2) === name) {\n    return link.Hash;\n  }\n  context.hamtDepth++;\n  const block = await blockstore.get(link.Hash, options);\n  node = decode(block);\n  return findShardCid(node, name, blockstore, context, options);\n};\nexport default findShardCid;","map":{"version":3,"names":["Bucket","createHAMT","decode","murmur3128","hashFn","buf","encode","slice","reverse","addLinksToHamtBucket","links","bucket","rootBucket","Promise","all","map","link","Name","Error","length","pos","parseInt","_putObjectAt","hash","_options","bits","put","substring","toPrefix","position","toString","toUpperCase","padStart","toBucketPath","path","_parent","push","findShardCid","node","name","blockstore","context","options","hamtDepth","lastBucket","Links","_findNewBucketAndPos","prefix","bucketPath","_posAtParent","find","entryPrefix","entryName","Hash","block","get"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-exporter/esm/src/utils/find-cid-in-shard.js"],"sourcesContent":["import {\n  Bucket,\n  createHAMT\n} from 'hamt-sharding';\nimport { decode } from '@ipld/dag-pb';\nimport { murmur3128 } from '@multiformats/murmur3';\nconst hashFn = async function (buf) {\n  return (await murmur3128.encode(buf)).slice(0, 8).reverse();\n};\nconst addLinksToHamtBucket = (links, bucket, rootBucket) => {\n  return Promise.all(links.map(link => {\n    if (link.Name == null) {\n      throw new Error('Unexpected Link without a Name');\n    }\n    if (link.Name.length === 2) {\n      const pos = parseInt(link.Name, 16);\n      return bucket._putObjectAt(pos, new Bucket({\n        hash: rootBucket._options.hash,\n        bits: rootBucket._options.bits\n      }, bucket, pos));\n    }\n    return rootBucket.put(link.Name.substring(2), true);\n  }));\n};\nconst toPrefix = position => {\n  return position.toString(16).toUpperCase().padStart(2, '0').substring(0, 2);\n};\nconst toBucketPath = position => {\n  let bucket = position.bucket;\n  const path = [];\n  while (bucket._parent) {\n    path.push(bucket);\n    bucket = bucket._parent;\n  }\n  path.push(bucket);\n  return path.reverse();\n};\nconst findShardCid = async (node, name, blockstore, context, options) => {\n  if (!context) {\n    const rootBucket = createHAMT({ hashFn });\n    context = {\n      rootBucket,\n      hamtDepth: 1,\n      lastBucket: rootBucket\n    };\n  }\n  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);\n  const position = await context.rootBucket._findNewBucketAndPos(name);\n  let prefix = toPrefix(position.pos);\n  const bucketPath = toBucketPath(position);\n  if (bucketPath.length > context.hamtDepth) {\n    context.lastBucket = bucketPath[context.hamtDepth];\n    prefix = toPrefix(context.lastBucket._posAtParent);\n  }\n  const link = node.Links.find(link => {\n    if (link.Name == null) {\n      return false;\n    }\n    const entryPrefix = link.Name.substring(0, 2);\n    const entryName = link.Name.substring(2);\n    if (entryPrefix !== prefix) {\n      return false;\n    }\n    if (entryName && entryName !== name) {\n      return false;\n    }\n    return true;\n  });\n  if (!link) {\n    return null;\n  }\n  if (link.Name != null && link.Name.substring(2) === name) {\n    return link.Hash;\n  }\n  context.hamtDepth++;\n  const block = await blockstore.get(link.Hash, options);\n  node = decode(block);\n  return findShardCid(node, name, blockstore, context, options);\n};\nexport default findShardCid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}