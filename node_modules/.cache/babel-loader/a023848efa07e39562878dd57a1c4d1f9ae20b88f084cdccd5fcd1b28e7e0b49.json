{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport batch from 'it-batch';\nasync function trickleStream(source, reduce, options) {\n  const root = new Root(options.layerRepeat);\n  let iteration = 0;\n  let maxDepth = 1;\n  let subTree = root;\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce));\n      }\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++;\n      }\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration);\n      iteration++;\n    }\n    subTree.append(layer);\n  }\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce));\n  }\n  return root.reduce(reduce);\n}\nexport default trickleStream;\nclass SubTree {\n  constructor(maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth;\n    this.layerRepeat = layerRepeat;\n    this.currentDepth = 1;\n    this.iteration = iteration;\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    };\n  }\n  isFull() {\n    if (!this.root.data) {\n      return false;\n    }\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      this._addNextNodeToParent(this.node);\n      return false;\n    }\n    const distantRelative = this._findParent(this.node, this.currentDepth);\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative);\n      return false;\n    }\n    return true;\n  }\n  _addNextNodeToParent(parent) {\n    this.parent = parent;\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    };\n    parent.children.push(nextNode);\n    this.currentDepth = nextNode.depth;\n    this.node = nextNode;\n  }\n  append(layer) {\n    this.node.data = layer;\n  }\n  reduce(reduce) {\n    return this._reduce(this.root, reduce);\n  }\n  async _reduce(node, reduce) {\n    let children = [];\n    if (node.children.length) {\n      children = await Promise.all(node.children.filter(child => child.data).map(child => this._reduce(child, reduce)));\n    }\n    return reduce((node.data || []).concat(children));\n  }\n  _findParent(node, depth) {\n    const parent = node.parent;\n    if (!parent || parent.depth === 0) {\n      return;\n    }\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      return this._findParent(parent, depth);\n    }\n    return parent;\n  }\n}\nclass Root extends SubTree {\n  constructor(layerRepeat) {\n    super(0, layerRepeat);\n    this.root.depth = 0;\n    this.currentDepth = 1;\n  }\n  addChild(child) {\n    this.root.children.push(child);\n  }\n  reduce(reduce) {\n    return reduce((this.root.data || []).concat(this.root.children));\n  }\n}","map":{"version":3,"names":["batch","trickleStream","source","reduce","options","root","Root","layerRepeat","iteration","maxDepth","subTree","layer","maxChildrenPerNode","isFull","addChild","SubTree","append","constructor","currentDepth","node","parent","children","depth","maxChildren","data","_addNextNodeToParent","distantRelative","_findParent","nextNode","Math","floor","length","push","_reduce","Promise","all","filter","child","map","concat"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/trickle.js"],"sourcesContent":["import batch from 'it-batch';\nasync function trickleStream(source, reduce, options) {\n  const root = new Root(options.layerRepeat);\n  let iteration = 0;\n  let maxDepth = 1;\n  let subTree = root;\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce));\n      }\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++;\n      }\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration);\n      iteration++;\n    }\n    subTree.append(layer);\n  }\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce));\n  }\n  return root.reduce(reduce);\n}\nexport default trickleStream;\nclass SubTree {\n  constructor(maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth;\n    this.layerRepeat = layerRepeat;\n    this.currentDepth = 1;\n    this.iteration = iteration;\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    };\n  }\n  isFull() {\n    if (!this.root.data) {\n      return false;\n    }\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      this._addNextNodeToParent(this.node);\n      return false;\n    }\n    const distantRelative = this._findParent(this.node, this.currentDepth);\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative);\n      return false;\n    }\n    return true;\n  }\n  _addNextNodeToParent(parent) {\n    this.parent = parent;\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    };\n    parent.children.push(nextNode);\n    this.currentDepth = nextNode.depth;\n    this.node = nextNode;\n  }\n  append(layer) {\n    this.node.data = layer;\n  }\n  reduce(reduce) {\n    return this._reduce(this.root, reduce);\n  }\n  async _reduce(node, reduce) {\n    let children = [];\n    if (node.children.length) {\n      children = await Promise.all(node.children.filter(child => child.data).map(child => this._reduce(child, reduce)));\n    }\n    return reduce((node.data || []).concat(children));\n  }\n  _findParent(node, depth) {\n    const parent = node.parent;\n    if (!parent || parent.depth === 0) {\n      return;\n    }\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      return this._findParent(parent, depth);\n    }\n    return parent;\n  }\n}\nclass Root extends SubTree {\n  constructor(layerRepeat) {\n    super(0, layerRepeat);\n    this.root.depth = 0;\n    this.currentDepth = 1;\n  }\n  addChild(child) {\n    this.root.children.push(child);\n  }\n  reduce(reduce) {\n    return reduce((this.root.data || []).concat(this.root.children));\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}