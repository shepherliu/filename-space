{"ast":null,"code":"import errCode from 'err-code';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as dagCbor from '@ipld/dag-cbor';\nimport * as raw from 'multiformats/codecs/raw';\nimport { identity } from 'multiformats/hashes/identity';\nimport dagPbResolver from './unixfs-v1/index.js';\nimport rawResolver from './raw.js';\nimport dagCborResolver from './dag-cbor.js';\nimport identifyResolver from './identity.js';\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n};\nfunction resolve(cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code];\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${cid.code}`), 'ERR_NO_RESOLVER');\n  }\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options);\n}\nexport default resolve;","map":{"version":3,"names":["errCode","dagPb","dagCbor","raw","identity","dagPbResolver","rawResolver","dagCborResolver","identifyResolver","resolvers","code","resolve","cid","name","path","toResolve","depth","blockstore","options","resolver","Error"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/index.js"],"sourcesContent":["import errCode from 'err-code';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as dagCbor from '@ipld/dag-cbor';\nimport * as raw from 'multiformats/codecs/raw';\nimport { identity } from 'multiformats/hashes/identity';\nimport dagPbResolver from './unixfs-v1/index.js';\nimport rawResolver from './raw.js';\nimport dagCborResolver from './dag-cbor.js';\nimport identifyResolver from './identity.js';\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n};\nfunction resolve(cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code];\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${ cid.code }`), 'ERR_NO_RESOLVER');\n  }\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options);\n}\nexport default resolve;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,OAAO,MAAM,gBAAgB;AACzC,OAAO,KAAKC,GAAG,MAAM,yBAAyB;AAC9C,SAASC,QAAQ,QAAQ,8BAA8B;AACvD,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,WAAW,MAAM,UAAU;AAClC,OAAOC,eAAe,MAAM,eAAe;AAC3C,OAAOC,gBAAgB,MAAM,eAAe;AAC5C,MAAMC,SAAS,GAAG;EAChB,CAACR,KAAK,CAACS,IAAI,GAAGL,aAAa;EAC3B,CAACF,GAAG,CAACO,IAAI,GAAGJ,WAAW;EACvB,CAACJ,OAAO,CAACQ,IAAI,GAAGH,eAAe;EAC/B,CAACH,QAAQ,CAACM,IAAI,GAAGF;AACnB,CAAC;AACD,SAASG,OAAO,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACvE,MAAMC,QAAQ,GAAGV,SAAS,CAACG,GAAG,CAACF,IAAI,CAAC;EACpC,IAAI,CAACS,QAAQ,EAAE;IACb,MAAMnB,OAAO,CAAC,IAAIoB,KAAK,CAAE,wBAAwBR,GAAG,CAACF,IAAM,EAAC,CAAC,EAAE,iBAAiB,CAAC;EACnF;EACA,OAAOS,QAAQ,CAACP,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEJ,OAAO,EAAEK,KAAK,EAAEC,UAAU,EAAEC,OAAO,CAAC;AAClF;AACA,eAAeP,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}