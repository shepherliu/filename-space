{"ast":null,"code":"import { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class MemoryBlockStore extends BaseBlockstore {\n  constructor() {\n    super();\n    this.store = new Map();\n  }\n  async *blocks() {\n    for (const [cidStr, bytes] of this.store.entries()) {\n      yield {\n        cid: CID.parse(cidStr),\n        bytes\n      };\n    }\n  }\n  put(cid, bytes) {\n    this.store.set(cid.toString(), bytes);\n    return Promise.resolve();\n  }\n  get(cid) {\n    const bytes = this.store.get(cid.toString());\n    if (!bytes) {\n      throw new Error(`block with cid ${cid.toString()} no found`);\n    }\n    return Promise.resolve(bytes);\n  }\n  has(cid) {\n    return Promise.resolve(this.store.has(cid.toString()));\n  }\n  close() {\n    this.store.clear();\n    return Promise.resolve();\n  }\n}","map":{"version":3,"names":["CID","BaseBlockstore","MemoryBlockStore","constructor","store","Map","blocks","cidStr","bytes","entries","cid","parse","put","set","toString","Promise","resolve","get","Error","has","close","clear"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-car/dist/esm/blockstore/memory.js"],"sourcesContent":["import { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class MemoryBlockStore extends BaseBlockstore {\n    constructor() {\n        super();\n        this.store = new Map();\n    }\n    async *blocks() {\n        for (const [cidStr, bytes] of this.store.entries()) {\n            yield { cid: CID.parse(cidStr), bytes };\n        }\n    }\n    put(cid, bytes) {\n        this.store.set(cid.toString(), bytes);\n        return Promise.resolve();\n    }\n    get(cid) {\n        const bytes = this.store.get(cid.toString());\n        if (!bytes) {\n            throw new Error(`block with cid ${cid.toString()} no found`);\n        }\n        return Promise.resolve(bytes);\n    }\n    has(cid) {\n        return Promise.resolve(this.store.has(cid.toString()));\n    }\n    close() {\n        this.store.clear();\n        return Promise.resolve();\n    }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,cAAc;AAClC,SAASC,cAAc,QAAQ,iBAAiB;AAChD,OAAO,MAAMC,gBAAgB,SAASD,cAAc,CAAC;EACjDE,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAAE;EAC1B;EACA,OAAOC,MAAM,GAAG;IACZ,KAAK,MAAM,CAACC,MAAM,EAAEC,KAAK,CAAC,IAAI,IAAI,CAACJ,KAAK,CAACK,OAAO,EAAE,EAAE;MAChD,MAAM;QAAEC,GAAG,EAAEV,GAAG,CAACW,KAAK,CAACJ,MAAM,CAAC;QAAEC;MAAM,CAAC;IAC3C;EACJ;EACAI,GAAG,CAACF,GAAG,EAAEF,KAAK,EAAE;IACZ,IAAI,CAACJ,KAAK,CAACS,GAAG,CAACH,GAAG,CAACI,QAAQ,EAAE,EAAEN,KAAK,CAAC;IACrC,OAAOO,OAAO,CAACC,OAAO,EAAE;EAC5B;EACAC,GAAG,CAACP,GAAG,EAAE;IACL,MAAMF,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACa,GAAG,CAACP,GAAG,CAACI,QAAQ,EAAE,CAAC;IAC5C,IAAI,CAACN,KAAK,EAAE;MACR,MAAM,IAAIU,KAAK,CAAE,kBAAiBR,GAAG,CAACI,QAAQ,EAAG,WAAU,CAAC;IAChE;IACA,OAAOC,OAAO,CAACC,OAAO,CAACR,KAAK,CAAC;EACjC;EACAW,GAAG,CAACT,GAAG,EAAE;IACL,OAAOK,OAAO,CAACC,OAAO,CAAC,IAAI,CAACZ,KAAK,CAACe,GAAG,CAACT,GAAG,CAACI,QAAQ,EAAE,CAAC,CAAC;EAC1D;EACAM,KAAK,GAAG;IACJ,IAAI,CAAChB,KAAK,CAACiB,KAAK,EAAE;IAClB,OAAON,OAAO,CAACC,OAAO,EAAE;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}