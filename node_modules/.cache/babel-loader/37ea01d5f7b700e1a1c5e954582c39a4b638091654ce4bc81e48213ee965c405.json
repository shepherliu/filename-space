{"ast":null,"code":"import { normaliseInput as normaliseInputSingle } from 'ipfs-core-utils/files/normalise-input-single';\nimport { normaliseInput as normaliseInputMultiple } from 'ipfs-core-utils/files/normalise-input-multiple';\nfunction isBytes(obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n}\nfunction isBlob(obj) {\n  return Boolean(obj.constructor) && (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') && typeof obj.stream === 'function';\n}\nfunction isSingle(input) {\n  return typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || '_readableState' in input;\n}\n/**\n * Get a single or multiple normaliser depending on the input.\n */\nexport function getNormaliser(input) {\n  if (isSingle(input)) {\n    return normaliseInputSingle(input);\n  } else {\n    return normaliseInputMultiple(input);\n  }\n}","map":{"version":3,"names":["normaliseInput","normaliseInputSingle","normaliseInputMultiple","isBytes","obj","ArrayBuffer","isView","isBlob","Boolean","constructor","name","stream","isSingle","input","String","getNormaliser"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-car/dist/esm/pack/utils/normalise-input.js"],"sourcesContent":["import { normaliseInput as normaliseInputSingle } from 'ipfs-core-utils/files/normalise-input-single';\nimport { normaliseInput as normaliseInputMultiple } from 'ipfs-core-utils/files/normalise-input-multiple';\nfunction isBytes(obj) {\n    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n}\nfunction isBlob(obj) {\n    return Boolean(obj.constructor) &&\n        (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n        typeof obj.stream === 'function';\n}\nfunction isSingle(input) {\n    return typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || '_readableState' in input;\n}\n/**\n * Get a single or multiple normaliser depending on the input.\n */\nexport function getNormaliser(input) {\n    if (isSingle(input)) {\n        return normaliseInputSingle(input);\n    }\n    else {\n        return normaliseInputMultiple(input);\n    }\n}\n"],"mappings":"AAAA,SAASA,cAAc,IAAIC,oBAAoB,QAAQ,8CAA8C;AACrG,SAASD,cAAc,IAAIE,sBAAsB,QAAQ,gDAAgD;AACzG,SAASC,OAAO,CAACC,GAAG,EAAE;EAClB,OAAOC,WAAW,CAACC,MAAM,CAACF,GAAG,CAAC,IAAIA,GAAG,YAAYC,WAAW;AAChE;AACA,SAASE,MAAM,CAACH,GAAG,EAAE;EACjB,OAAOI,OAAO,CAACJ,GAAG,CAACK,WAAW,CAAC,KAC1BL,GAAG,CAACK,WAAW,CAACC,IAAI,KAAK,MAAM,IAAIN,GAAG,CAACK,WAAW,CAACC,IAAI,KAAK,MAAM,CAAC,IACpE,OAAON,GAAG,CAACO,MAAM,KAAK,UAAU;AACxC;AACA,SAASC,QAAQ,CAACC,KAAK,EAAE;EACrB,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYC,MAAM,IAAIX,OAAO,CAACU,KAAK,CAAC,IAAIN,MAAM,CAACM,KAAK,CAAC,IAAI,gBAAgB,IAAIA,KAAK;AAC/H;AACA;AACA;AACA;AACA,OAAO,SAASE,aAAa,CAACF,KAAK,EAAE;EACjC,IAAID,QAAQ,CAACC,KAAK,CAAC,EAAE;IACjB,OAAOZ,oBAAoB,CAACY,KAAK,CAAC;EACtC,CAAC,MACI;IACD,OAAOX,sBAAsB,CAACW,KAAK,CAAC;EACxC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}