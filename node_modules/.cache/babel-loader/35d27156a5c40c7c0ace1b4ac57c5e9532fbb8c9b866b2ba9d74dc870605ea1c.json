{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nimport { createHAMT, Bucket } from 'hamt-sharding';\nclass DirSharded extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n  }\n  async put(name, value) {\n    await this._bucket.put(name, value);\n  }\n  get(name) {\n    return this._bucket.get(name);\n  }\n  childCount() {\n    return this._bucket.leafCount();\n  }\n  directChildrenCount() {\n    return this._bucket.childrenCount();\n  }\n  onlyChild() {\n    return this._bucket.onlyChild();\n  }\n  async *eachChildSeries() {\n    for await (const {\n      key,\n      value\n    } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      };\n    }\n  }\n  async *flush(blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      };\n    }\n  }\n}\nexport default DirSharded;\nasync function* flush(bucket, blockstore, shardRoot, options) {\n  const children = bucket._children;\n  const links = [];\n  let childrenSize = 0;\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i);\n    if (!child) {\n      continue;\n    }\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n    if (child instanceof Bucket) {\n      let shard;\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard;\n      }\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found');\n      }\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      });\n      childrenSize += shard.size;\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value;\n      let flushedDir;\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry;\n        yield flushedDir;\n      }\n      const label = labelPrefix + child.key;\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      });\n      childrenSize += flushedDir.size;\n    } else {\n      const value = child.value;\n      if (!value.cid) {\n        continue;\n      }\n      const label = labelPrefix + child.key;\n      const size = value.size;\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      });\n      childrenSize += size;\n    }\n  }\n  const data = Uint8Array.from(children.bitField().reverse());\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  });\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  };\n  const buffer = encode(prepare(node));\n  const cid = await persist(buffer, blockstore, options);\n  const size = buffer.length + childrenSize;\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  };\n}","map":{"version":3,"names":["encode","prepare","UnixFS","Dir","persist","createHAMT","Bucket","DirSharded","constructor","props","options","_bucket","hashFn","hamtHashFn","bits","hamtBucketBits","put","name","value","get","childCount","leafCount","directChildrenCount","childrenCount","onlyChild","eachChildSeries","key","eachLeafSeries","child","flush","blockstore","entry","path","bucket","shardRoot","children","_children","links","childrenSize","i","length","labelPrefix","toString","toUpperCase","padStart","shard","subShard","Error","push","Name","Tsize","size","Hash","cid","dir","flushedDir","label","data","Uint8Array","from","bitField","reverse","type","fanout","tableSize","hashType","hamtHashCode","mtime","mode","node","Data","marshal","Links","buffer","unixfs"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/dir-sharded.js"],"sourcesContent":["import {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nimport {\n  createHAMT,\n  Bucket\n} from 'hamt-sharding';\nclass DirSharded extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n  }\n  async put(name, value) {\n    await this._bucket.put(name, value);\n  }\n  get(name) {\n    return this._bucket.get(name);\n  }\n  childCount() {\n    return this._bucket.leafCount();\n  }\n  directChildrenCount() {\n    return this._bucket.childrenCount();\n  }\n  onlyChild() {\n    return this._bucket.onlyChild();\n  }\n  async *eachChildSeries() {\n    for await (const {key, value} of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      };\n    }\n  }\n  async *flush(blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      };\n    }\n  }\n}\nexport default DirSharded;\nasync function* flush(bucket, blockstore, shardRoot, options) {\n  const children = bucket._children;\n  const links = [];\n  let childrenSize = 0;\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i);\n    if (!child) {\n      continue;\n    }\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n    if (child instanceof Bucket) {\n      let shard;\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard;\n      }\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found');\n      }\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      });\n      childrenSize += shard.size;\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value;\n      let flushedDir;\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry;\n        yield flushedDir;\n      }\n      const label = labelPrefix + child.key;\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      });\n      childrenSize += flushedDir.size;\n    } else {\n      const value = child.value;\n      if (!value.cid) {\n        continue;\n      }\n      const label = labelPrefix + child.key;\n      const size = value.size;\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      });\n      childrenSize += size;\n    }\n  }\n  const data = Uint8Array.from(children.bitField().reverse());\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  });\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  };\n  const buffer = encode(prepare(node));\n  const cid = await persist(buffer, blockstore, options);\n  const size = buffer.length + childrenSize;\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}