{"ast":null,"code":"const MAX_HEADER_LENGTH = 2000;\nconst THROW_ON_MAX_HEADER_LENGTH_EXCEEDED = false;\nfunction hasRel(x) {\n  return x && x.rel;\n}\nfunction intoRels(acc, x) {\n  function splitRel(rel) {\n    acc[rel] = Object.assign({}, x, {\n      rel: rel\n    });\n  }\n  x.rel.split(/\\s+/).forEach(splitRel);\n  return acc;\n}\nfunction createObjects(acc, p) {\n  // rel=\"next\" => 1: rel 2: next\n  const m = p.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/);\n  if (m) acc[m[1]] = m[2];\n  return acc;\n}\nfunction parseLink(link) {\n  try {\n    const m = link.match(/<?([^>]*)>(.*)/);\n    const linkUrl = m[1];\n    const parts = m[2].split(';');\n    const qry = {};\n    // The origin is unused but it's required to parse relative URLs\n    const url = new URL(linkUrl, 'https://example.com');\n    for (const [key, value] of url.searchParams) {\n      qry[key] = value;\n    }\n    parts.shift();\n    let info = parts.reduce(createObjects, {});\n    info = Object.assign({}, qry, info);\n    info.url = linkUrl;\n    return info;\n  } catch {\n    return null;\n  }\n}\nfunction checkHeader(linkHeader, options) {\n  if (!linkHeader) return false;\n  options = options || {};\n  const maxHeaderLength = options.maxHeaderLength || MAX_HEADER_LENGTH;\n  const throwOnMaxHeaderLengthExceeded = options.throwOnMaxHeaderLengthExceeded || THROW_ON_MAX_HEADER_LENGTH_EXCEEDED;\n  if (linkHeader.length > maxHeaderLength) {\n    if (throwOnMaxHeaderLengthExceeded) {\n      throw new Error('Input string too long, it should be under ' + maxHeaderLength + ' characters.');\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nfunction parseLinkHeader(linkHeader, options) {\n  if (!checkHeader(linkHeader, options)) return null;\n  return linkHeader.split(/,\\s*</).map(parseLink).filter(hasRel).reduce(intoRels, {});\n}\nexport { parseLinkHeader };","map":{"version":3,"names":["MAX_HEADER_LENGTH","THROW_ON_MAX_HEADER_LENGTH_EXCEEDED","hasRel","x","rel","intoRels","acc","splitRel","Object","assign","split","forEach","createObjects","p","m","match","parseLink","link","linkUrl","parts","qry","url","URL","key","value","searchParams","shift","info","reduce","checkHeader","linkHeader","options","maxHeaderLength","throwOnMaxHeaderLengthExceeded","length","Error","parseLinkHeader","map","filter"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/@web3-storage/parse-link-header/index.js"],"sourcesContent":["const MAX_HEADER_LENGTH = 2000\nconst THROW_ON_MAX_HEADER_LENGTH_EXCEEDED = false\n\nfunction hasRel (x) {\n  return x && x.rel\n}\n\nfunction intoRels (acc, x) {\n  function splitRel (rel) {\n    acc[rel] = Object.assign({}, x, { rel: rel })\n  }\n\n  x.rel.split(/\\s+/).forEach(splitRel)\n\n  return acc\n}\n\nfunction createObjects (acc, p) {\n  // rel=\"next\" => 1: rel 2: next\n  const m = p.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/)\n  if (m) acc[m[1]] = m[2]\n  return acc\n}\n\nfunction parseLink (link) {\n  try {\n    const m = link.match(/<?([^>]*)>(.*)/)\n    const linkUrl = m[1]\n    const parts = m[2].split(';')\n    const qry = {}\n    // The origin is unused but it's required to parse relative URLs\n    const url = new URL(linkUrl, 'https://example.com')\n\n    for (const [key, value] of url.searchParams) {\n      qry[key] = value\n    }\n\n    parts.shift()\n\n    let info = parts.reduce(createObjects, {})\n    info = Object.assign({}, qry, info)\n    info.url = linkUrl\n    return info\n  } catch {\n    return null\n  }\n}\n\nfunction checkHeader (linkHeader, options) {\n  if (!linkHeader) return false\n\n  options = options || {}\n  const maxHeaderLength = options.maxHeaderLength || MAX_HEADER_LENGTH\n  const throwOnMaxHeaderLengthExceeded = options.throwOnMaxHeaderLengthExceeded || THROW_ON_MAX_HEADER_LENGTH_EXCEEDED\n\n  if (linkHeader.length > maxHeaderLength) {\n    if (throwOnMaxHeaderLengthExceeded) {\n      throw new Error('Input string too long, it should be under ' + maxHeaderLength + ' characters.')\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\nfunction parseLinkHeader (linkHeader, options) {\n  if (!checkHeader(linkHeader, options)) return null\n\n  return linkHeader.split(/,\\s*</)\n    .map(parseLink)\n    .filter(hasRel)\n    .reduce(intoRels, {})\n}\n\nexport { parseLinkHeader }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}