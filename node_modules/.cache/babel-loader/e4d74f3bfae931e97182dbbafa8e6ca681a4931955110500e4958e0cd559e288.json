{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nclass DirFlat extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n  directChildrenCount() {\n    return this.childCount();\n  }\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n}\nexport default DirFlat;","map":{"version":3,"names":["encode","prepare","UnixFS","Dir","persist","DirFlat","constructor","props","options","_children","put","name","value","cid","undefined","size","get","Promise","resolve","childCount","Object","keys","length","directChildrenCount","onlyChild","eachChildSeries","i","key","child","flush","block","children","links","entry","push","Name","Tsize","Hash","unixfs","type","mtime","mode","node","Data","marshal","Links","buffer","reduce","acc","curr","path"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/dir-flat.js"],"sourcesContent":["import {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nclass DirFlat extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n  directChildrenCount() {\n    return this.childCount();\n  }\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n}\nexport default DirFlat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}