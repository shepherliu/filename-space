{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { isCloudflareWorkers } from './env.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encodeBase64 } from './base64url.js';\nimport formatPEM from '../lib/format_pem.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\nconst genericExport = async (keyType, keyFormat, key) => {\n  if (!isCryptoKey(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n  if (!key.extractable) {\n    throw new TypeError('CryptoKey is not extractable');\n  }\n  if (key.type !== keyType) {\n    throw new TypeError(`key is not a ${keyType} key`);\n  }\n  return formatPEM(encodeBase64(new Uint8Array(await crypto.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);\n};\nexport const toSPKI = key => {\n  return genericExport('public', 'spki', key);\n};\nexport const toPKCS8 = key => {\n  return genericExport('private', 'pkcs8', key);\n};\nconst findOid = (keyData, oid, from = 0) => {\n  if (from === 0) {\n    oid.unshift(oid.length);\n    oid.unshift(0x06);\n  }\n  let i = keyData.indexOf(oid[0], from);\n  if (i === -1) return false;\n  const sub = keyData.subarray(i, i + oid.length);\n  if (sub.length !== oid.length) return false;\n  return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);\n};\nconst getNamedCurve = keyData => {\n  switch (true) {\n    case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):\n      return 'P-256';\n    case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):\n      return 'P-384';\n    case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):\n      return 'P-521';\n    case findOid(keyData, [0x2b, 0x65, 0x6e]):\n      return 'X25519';\n    case findOid(keyData, [0x2b, 0x65, 0x6f]):\n      return 'X448';\n    case findOid(keyData, [0x2b, 0x65, 0x70]):\n      return 'Ed25519';\n    case findOid(keyData, [0x2b, 0x65, 0x71]):\n      return 'Ed448';\n    default:\n      throw new JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');\n  }\n};\nconst genericImport = async (replace, keyFormat, pem, alg, options) => {\n  var _a;\n  let algorithm;\n  let keyUsages;\n  const keyData = new Uint8Array(atob(pem.replace(replace, '')).split('').map(c => c.charCodeAt(0)));\n  const isPublic = keyFormat === 'spki';\n  switch (alg) {\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      algorithm = {\n        name: 'RSA-PSS',\n        hash: `SHA-${alg.slice(-3)}`\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      algorithm = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: `SHA-${alg.slice(-3)}`\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      algorithm = {\n        name: 'RSA-OAEP',\n        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`\n      };\n      keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];\n      break;\n    case 'ES256':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-256'\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'ES384':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-384'\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'ES512':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-521'\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        const namedCurve = getNamedCurve(keyData);\n        algorithm = namedCurve.startsWith('P-') ? {\n          name: 'ECDH',\n          namedCurve\n        } : {\n          name: namedCurve\n        };\n        keyUsages = isPublic ? [] : ['deriveBits'];\n        break;\n      }\n    case isCloudflareWorkers() && 'EdDSA':\n      {\n        const namedCurve = getNamedCurve(keyData).toUpperCase();\n        algorithm = {\n          name: `NODE-${namedCurve}`,\n          namedCurve: `NODE-${namedCurve}`\n        };\n        keyUsages = isPublic ? ['verify'] : ['sign'];\n        break;\n      }\n    case 'EdDSA':\n      algorithm = {\n        name: getNamedCurve(keyData)\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    default:\n      throw new JOSENotSupported('Invalid or unsupported \"alg\" (Algorithm) value');\n  }\n  return crypto.subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n};\nexport const fromPKCS8 = (pem, alg, options) => {\n  return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, 'pkcs8', pem, alg, options);\n};\nexport const fromSPKI = (pem, alg, options) => {\n  return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, 'spki', pem, alg, options);\n};","map":{"version":3,"names":["isCloudflareWorkers","crypto","isCryptoKey","invalidKeyInput","encodeBase64","formatPEM","JOSENotSupported","types","genericExport","keyType","keyFormat","key","TypeError","extractable","type","Uint8Array","subtle","exportKey","toUpperCase","toSPKI","toPKCS8","findOid","keyData","oid","from","unshift","length","i","indexOf","sub","subarray","every","value","index","getNamedCurve","genericImport","replace","pem","alg","options","_a","algorithm","keyUsages","atob","split","map","c","charCodeAt","isPublic","name","hash","slice","parseInt","namedCurve","startsWith","importKey","fromPKCS8","fromSPKI"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/jose/dist/browser/runtime/asn1.js"],"sourcesContent":["import { isCloudflareWorkers } from './env.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encodeBase64 } from './base64url.js';\nimport formatPEM from '../lib/format_pem.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\nconst genericExport = async (keyType, keyFormat, key) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    if (!key.extractable) {\n        throw new TypeError('CryptoKey is not extractable');\n    }\n    if (key.type !== keyType) {\n        throw new TypeError(`key is not a ${keyType} key`);\n    }\n    return formatPEM(encodeBase64(new Uint8Array(await crypto.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);\n};\nexport const toSPKI = (key) => {\n    return genericExport('public', 'spki', key);\n};\nexport const toPKCS8 = (key) => {\n    return genericExport('private', 'pkcs8', key);\n};\nconst findOid = (keyData, oid, from = 0) => {\n    if (from === 0) {\n        oid.unshift(oid.length);\n        oid.unshift(0x06);\n    }\n    let i = keyData.indexOf(oid[0], from);\n    if (i === -1)\n        return false;\n    const sub = keyData.subarray(i, i + oid.length);\n    if (sub.length !== oid.length)\n        return false;\n    return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);\n};\nconst getNamedCurve = (keyData) => {\n    switch (true) {\n        case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):\n            return 'P-256';\n        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):\n            return 'P-384';\n        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):\n            return 'P-521';\n        case findOid(keyData, [0x2b, 0x65, 0x6e]):\n            return 'X25519';\n        case findOid(keyData, [0x2b, 0x65, 0x6f]):\n            return 'X448';\n        case findOid(keyData, [0x2b, 0x65, 0x70]):\n            return 'Ed25519';\n        case findOid(keyData, [0x2b, 0x65, 0x71]):\n            return 'Ed448';\n        default:\n            throw new JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');\n    }\n};\nconst genericImport = async (replace, keyFormat, pem, alg, options) => {\n    var _a;\n    let algorithm;\n    let keyUsages;\n    const keyData = new Uint8Array(atob(pem.replace(replace, ''))\n        .split('')\n        .map((c) => c.charCodeAt(0)));\n    const isPublic = keyFormat === 'spki';\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = { name: 'RSA-PSS', hash: `SHA-${alg.slice(-3)}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${alg.slice(-3)}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n            };\n            keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            const namedCurve = getNamedCurve(keyData);\n            algorithm = namedCurve.startsWith('P-') ? { name: 'ECDH', namedCurve } : { name: namedCurve };\n            keyUsages = isPublic ? [] : ['deriveBits'];\n            break;\n        }\n        case isCloudflareWorkers() && 'EdDSA': {\n            const namedCurve = getNamedCurve(keyData).toUpperCase();\n            algorithm = { name: `NODE-${namedCurve}`, namedCurve: `NODE-${namedCurve}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        }\n        case 'EdDSA':\n            algorithm = { name: getNamedCurve(keyData) };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (Algorithm) value');\n    }\n    return crypto.subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n};\nexport const fromPKCS8 = (pem, alg, options) => {\n    return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, 'pkcs8', pem, alg, options);\n};\nexport const fromSPKI = (pem, alg, options) => {\n    return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, 'spki', pem, alg, options);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}