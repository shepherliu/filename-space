{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done) {\n      yield {\n        content: []\n      };\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}","map":{"version":3,"names":["errCode","browserStreamToIt","itPeekable","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateSingle","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","content","push","Number","isInteger","path","mode","mtime","file"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-single.js"],"sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield { content: [] };\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"],"mappings":";AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,UAAU,MAAM,aAAa;AACpC,SACEC,OAAO,EACPC,MAAM,EACNC,gBAAgB,EAChBC,YAAY,QACP,YAAY;AACnB,SACEC,UAAU,EACVC,SAAS,QACJ,aAAa;AACpB,OAAO,gBAAgBC,wBAAwB,CAACC,KAAK,EAAEC,gBAAgB,EAAE;EACvE,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE;IACzC,MAAMZ,OAAO,CAAC,IAAIa,KAAK,CAAE,qBAAqBH,KAAO,EAAC,CAAC,EAAE,sBAAsB,CAAC;EAClF;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYI,MAAM,EAAE;IACxD,MAAMC,YAAY,CAACL,KAAK,CAACM,QAAQ,EAAE,EAAEL,gBAAgB,CAAC;IACtD;EACF;EACA,IAAIR,OAAO,CAACO,KAAK,CAAC,IAAIN,MAAM,CAACM,KAAK,CAAC,EAAE;IACnC,MAAMK,YAAY,CAACL,KAAK,EAAEC,gBAAgB,CAAC;IAC3C;EACF;EACA,IAAIN,gBAAgB,CAACK,KAAK,CAAC,EAAE;IAC3BA,KAAK,GAAGT,iBAAiB,CAACS,KAAK,CAAC;EAClC;EACA,IAAIO,MAAM,CAACC,QAAQ,IAAIR,KAAK,IAAIO,MAAM,CAACE,aAAa,IAAIT,KAAK,EAAE;IAC7D,MAAMU,QAAQ,GAAGlB,UAAU,CAACQ,KAAK,CAAC;IAClC,MAAM;MAACW,KAAK;MAAEC;IAAI,CAAC,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAC3C,IAAID,IAAI,EAAE;MACR,MAAM;QAAEE,OAAO,EAAE;MAAG,CAAC;MACrB;IACF;IACAJ,QAAQ,CAACK,IAAI,CAACJ,KAAK,CAAC;IACpB,IAAIK,MAAM,CAACC,SAAS,CAACN,KAAK,CAAC,IAAIlB,OAAO,CAACkB,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYP,MAAM,EAAE;MACrG,MAAMC,YAAY,CAACK,QAAQ,EAAET,gBAAgB,CAAC;MAC9C;IACF;IACA,MAAMX,OAAO,CAAC,IAAIa,KAAK,CAAC,qGAAqG,CAAC,EAAE,sBAAsB,CAAC;EACzJ;EACA,IAAIP,YAAY,CAACI,KAAK,CAAC,EAAE;IACvB,MAAMK,YAAY,CAACL,KAAK,EAAEC,gBAAgB,CAAC;IAC3C;EACF;EACA,MAAMX,OAAO,CAAC,IAAIa,KAAK,CAAC,oCAAoC,GAAG,OAAOH,KAAK,GAAG,wBAAwB,CAAC,EAAE,sBAAsB,CAAC;AAClI;AACA,eAAeK,YAAY,CAACL,KAAK,EAAEC,gBAAgB,EAAE;EACnD,MAAM;IAACiB,IAAI;IAAEC,IAAI;IAAEC,KAAK;IAAEN;EAAO,CAAC,GAAGd,KAAK;EAC1C,MAAMqB,IAAI,GAAG;IACXH,IAAI,EAAEA,IAAI,IAAI,EAAE;IAChBC,IAAI,EAAErB,SAAS,CAACqB,IAAI,CAAC;IACrBC,KAAK,EAAEvB,UAAU,CAACuB,KAAK;EACzB,CAAC;EACD,IAAIN,OAAO,EAAE;IACXO,IAAI,CAACP,OAAO,GAAG,MAAMb,gBAAgB,CAACa,OAAO,CAAC;EAChD,CAAC,MAAM,IAAI,CAACI,IAAI,EAAE;IAChBG,IAAI,CAACP,OAAO,GAAG,MAAMb,gBAAgB,CAACD,KAAK,CAAC;EAC9C;EACA,OAAOqB,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}