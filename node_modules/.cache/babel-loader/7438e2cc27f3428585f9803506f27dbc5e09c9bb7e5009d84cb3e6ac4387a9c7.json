{"ast":null,"code":"import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n  let treeBuilder;\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}","map":{"version":3,"names":["parallelBatch","defaultOptions","dagBuilderFn","treeBuilderFn","importer","source","blockstore","options","opts","dagBuilder","treeBuilder","candidates","Symbol","asyncIterator","iterator","entry","fileImportConcurrency","cid","path","unixfs","size"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/index.js"],"sourcesContent":["import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n  let treeBuilder;\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,cAAc,MAAM,cAAc;AACzC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAO,gBAAgBC,QAAQ,CAACC,MAAM,EAAEC,UAAU,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChE,MAAMC,IAAI,GAAGP,cAAc,CAACM,OAAO,CAAC;EACpC,IAAIE,UAAU;EACd,IAAI,OAAOF,OAAO,CAACE,UAAU,KAAK,UAAU,EAAE;IAC5CA,UAAU,GAAGF,OAAO,CAACE,UAAU;EACjC,CAAC,MAAM;IACLA,UAAU,GAAGP,YAAY;EAC3B;EACA,IAAIQ,WAAW;EACf,IAAI,OAAOH,OAAO,CAACG,WAAW,KAAK,UAAU,EAAE;IAC7CA,WAAW,GAAGH,OAAO,CAACG,WAAW;EACnC,CAAC,MAAM;IACLA,WAAW,GAAGP,aAAa;EAC7B;EACA,IAAIQ,UAAU;EACd,IAAIC,MAAM,CAACC,aAAa,IAAIR,MAAM,IAAIO,MAAM,CAACE,QAAQ,IAAIT,MAAM,EAAE;IAC/DM,UAAU,GAAGN,MAAM;EACrB,CAAC,MAAM;IACLM,UAAU,GAAG,CAACN,MAAM,CAAC;EACvB;EACA,WAAW,MAAMU,KAAK,IAAIL,WAAW,CAACV,aAAa,CAACS,UAAU,CAACE,UAAU,EAAEL,UAAU,EAAEE,IAAI,CAAC,EAAEA,IAAI,CAACQ,qBAAqB,CAAC,EAAEV,UAAU,EAAEE,IAAI,CAAC,EAAE;IAC5I,MAAM;MACJS,GAAG,EAAEF,KAAK,CAACE,GAAG;MACdC,IAAI,EAAEH,KAAK,CAACG,IAAI;MAChBC,MAAM,EAAEJ,KAAK,CAACI,MAAM;MACpBC,IAAI,EAAEL,KAAK,CAACK;IACd,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}