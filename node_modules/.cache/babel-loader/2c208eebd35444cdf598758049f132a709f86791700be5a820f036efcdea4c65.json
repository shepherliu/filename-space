{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * A client library for the https://web3.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://web3.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { Web3Storage, File } from 'web3.storage'\n * const client = new Web3Storage({ token: API_TOKEN })\n *\n * const cid = await client.put([new File(['hello world'], 'hello.txt', { type: 'text/plain' })])\n * ```\n * @module\n */\nimport { transform } from 'streaming-iterables';\nimport pRetry, { AbortError } from 'p-retry';\nimport { pack } from 'ipfs-car/pack';\nimport { parseLinkHeader } from '@web3-storage/parse-link-header';\nimport { unpackStream } from 'ipfs-car/unpack';\nimport { TreewalkCarSplitter } from 'carbites/treewalk';\nimport { CarReader } from '@ipld/car';\nimport { filesFromPath, getFilesFromPath } from 'files-from-path';\nimport throttledQueue from 'throttled-queue';\nimport { fetch as _fetch, File, Blob, Blockstore } from './platform.js';\nconst MAX_PUT_RETRIES = 5;\nconst MAX_CONCURRENT_UPLOADS = 3;\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024 * 10; // chunk to ~10MB CARs\nconst MAX_BLOCK_SIZE = 1048576;\nconst MAX_CHUNK_SIZE = 104857600;\n// These match what is enforced server-side\nconst RATE_LIMIT_REQUESTS = 30;\nconst RATE_LIMIT_PERIOD = 10 * 1000;\n\n/** @typedef { import('./lib/interface.js').API } API */\n/** @typedef { import('./lib/interface.js').Status} Status */\n/** @typedef { import('./lib/interface.js').Upload} Upload */\n/** @typedef { import('./lib/interface.js').Service } Service */\n/** @typedef { import('./lib/interface.js').Web3File} Web3File */\n/** @typedef { import('./lib/interface.js').Filelike } Filelike */\n/** @typedef { import('./lib/interface.js').CIDString} CIDString */\n/** @typedef { import('./lib/interface.js').RequestOptions} RequestOptions */\n/** @typedef { import('./lib/interface.js').PutOptions} PutOptions */\n/** @typedef { import('./lib/interface.js').PutCarOptions} PutCarOptions */\n/** @typedef { import('./lib/interface.js').ListOptions} ListOptions */\n/** @typedef { import('./lib/interface.js').RateLimiter } RateLimiter */\n/** @typedef { import('./lib/interface.js').UnixFSEntry} UnixFSEntry */\n/** @typedef { import('./lib/interface.js').Web3Response} Web3Response */\n\n/**\n * Creates a rate limiter which limits at the same rate as is enforced\n * server-side, to allow the client to avoid exceeding the requests limit and\n * being blocked for 30 seconds.\n * @returns {RateLimiter}\n */\nexport function createRateLimiter() {\n  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD);\n  return () => throttle(() => {});\n}\n\n/**\n * Rate limiter used by static API if no rate limiter is passed. Note that each\n * instance of the Web3Storage class gets it's own limiter if none is passed.\n * This is because rate limits are enforced per API token.\n */\nconst globalRateLimiter = createRateLimiter();\n\n/**\n * @implements Service\n */\nclass Web3Storage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { Web3Storage } from 'web3.storage'\n   * const client = new Web3Storage({ token: API_TOKEN })\n   * ```\n   *\n    @param {Service} options\n   */\n  constructor({\n    token,\n    endpoint = new URL('https://api.web3.storage'),\n    rateLimiter,\n    fetch = _fetch\n  }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token;\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = endpoint;\n    /**\n     * @readonly\n     */\n    this.rateLimiter = rateLimiter || createRateLimiter();\n    /**\n     * Optional custom fetch function. Defaults to global fetch in browsers or @web-std/fetch on node.\n     * @readonly\n     */\n    this.fetch = fetch;\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   * @returns {Record<string, string>}\n   */\n  static headers(token) {\n    if (!token) throw new Error('missing token');\n    return {\n      Authorization: `Bearer ${token}`,\n      'X-Client': 'web3.storage/js'\n    };\n  }\n\n  /**\n   * @param {Service} service\n   * @param {Iterable<Filelike>} files\n   * @param {PutOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async put({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter,\n    fetch = _fetch\n  }, files, {\n    onRootCidReady,\n    onStoredChunk,\n    maxRetries = MAX_PUT_RETRIES,\n    maxChunkSize = DEFAULT_CHUNK_SIZE,\n    wrapWithDirectory = true,\n    name,\n    signal\n  } = {}) {\n    if (maxChunkSize >= MAX_CHUNK_SIZE || maxChunkSize < MAX_BLOCK_SIZE) {\n      throw new Error('maximum chunk size must be less than 100MiB and greater than or equal to 1MB');\n    }\n    const blockstore = new Blockstore();\n    try {\n      const {\n        out,\n        root\n      } = await pack({\n        input: Array.from(files).map(toImportCandidate),\n        blockstore,\n        wrapWithDirectory,\n        maxChunkSize: MAX_BLOCK_SIZE,\n        maxChildrenPerNode: 1024\n      });\n      onRootCidReady && onRootCidReady(root.toString());\n      const car = await CarReader.fromIterable(out);\n      return await Web3Storage.putCar({\n        endpoint,\n        token,\n        rateLimiter,\n        fetch\n      }, car, {\n        onStoredChunk,\n        maxRetries,\n        maxChunkSize,\n        name,\n        signal\n      });\n    } finally {\n      await blockstore.close();\n    }\n  }\n\n  /**\n   * @param {Service} service\n   * @param {import('@ipld/car/api').CarReader} car\n   * @param {PutCarOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async putCar({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter,\n    fetch = _fetch\n  }, car, {\n    name,\n    onStoredChunk,\n    maxRetries = MAX_PUT_RETRIES,\n    maxChunkSize = DEFAULT_CHUNK_SIZE,\n    decoders,\n    signal\n  } = {}) {\n    if (maxChunkSize >= MAX_CHUNK_SIZE || maxChunkSize < MAX_BLOCK_SIZE) {\n      throw new Error('maximum chunk size must be less than 100MiB and greater than or equal to 1MB');\n    }\n    const targetSize = maxChunkSize;\n    const url = new URL('car', endpoint);\n    let headers = Web3Storage.headers(token);\n    if (name) {\n      headers = {\n        ...headers,\n        'X-Name': encodeURIComponent(name)\n      };\n    }\n    const roots = await car.getRoots();\n    if (roots[0] == null) {\n      throw new Error('missing root CID');\n    }\n    if (roots.length > 1) {\n      throw new Error('too many roots');\n    }\n    const carRoot = roots[0].toString();\n    const splitter = new TreewalkCarSplitter(car, targetSize, {\n      decoders\n    });\n\n    /**\n     * @param {AsyncIterable<Uint8Array>} car\n     * @returns {Promise<CIDString>}\n     */\n    const onCarChunk = async car => {\n      const carParts = [];\n      for await (const part of car) {\n        carParts.push(part);\n      }\n      const carFile = new Blob(carParts, {\n        type: 'application/vnd.ipld.car'\n      });\n      const res = await pRetry(async () => {\n        await rateLimiter();\n        /** @type {Response} */\n        let response;\n        try {\n          response = await fetch(url.toString(), {\n            method: 'POST',\n            headers,\n            body: carFile,\n            signal\n          });\n        } catch ( /** @type {any} */err) {\n          throw signal && signal.aborted ? new AbortError(err) : err;\n        }\n        /* c8 ignore next 3 */\n        if (response.status === 429) {\n          throw new Error('rate limited');\n        }\n        const res = await response.json();\n        if (!response.ok) {\n          throw new Error(res.message);\n        }\n        if (res.cid !== carRoot) {\n          throw new Error(`root CID mismatch, expected: ${carRoot}, received: ${res.cid}`);\n        }\n        return res.cid;\n      }, {\n        retries: maxRetries\n      });\n      onStoredChunk && onStoredChunk(carFile.size);\n      return res;\n    };\n    const upload = transform(MAX_CONCURRENT_UPLOADS, onCarChunk);\n    for await (const _ of upload(splitter.cars())) {} // eslint-disable-line\n    return carRoot;\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<Web3Response | null>}\n   */\n  static async get({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter,\n    fetch = _fetch\n  }, cid, options = {}) {\n    const url = new URL(`car/${cid}`, endpoint);\n    await rateLimiter();\n    const res = await fetch(url.toString(), {\n      method: 'GET',\n      headers: Web3Storage.headers(token),\n      signal: options.signal\n    });\n    /* c8 ignore next 3 */\n    if (res.status === 429) {\n      throw new Error('rate limited');\n    }\n    return toWeb3Response(res);\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  /* c8 ignore next 4 */\n  static async delete({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter\n  }, cid, options = {}) {\n    console.log('Not deleting', cid, endpoint, token, rateLimiter, options);\n    throw Error('.delete not implemented yet');\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<Status | undefined>}\n   */\n  static async status({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter,\n    fetch = _fetch\n  }, cid, options = {}) {\n    const url = new URL(`status/${cid}`, endpoint);\n    await rateLimiter();\n    const res = await fetch(url.toString(), {\n      method: 'GET',\n      headers: Web3Storage.headers(token),\n      signal: options.signal\n    });\n    /* c8 ignore next 3 */\n    if (res.status === 429) {\n      throw new Error('rate limited');\n    }\n    if (res.status === 404) {\n      return undefined;\n    }\n    if (!res.ok) {\n      throw new Error(res.statusText);\n    }\n    return res.json();\n  }\n\n  /**\n   * @param {Service} service\n   * @param {ListOptions} [opts]\n   * @returns {AsyncIterable<Upload>}\n   */\n  static async *list(service, {\n    before = new Date().toISOString(),\n    maxResults = Infinity,\n    signal\n  } = {}) {\n    /**\n     * @param {Service} service\n     * @param {{before: string, size: number}} opts\n     * @returns {Promise<Response>}\n     */\n    async function listPage({\n      endpoint,\n      token,\n      rateLimiter = globalRateLimiter,\n      fetch = _fetch\n    }, {\n      before,\n      size\n    }) {\n      const search = new URLSearchParams({\n        before,\n        size: size.toString()\n      });\n      const url = new URL(`user/uploads?${search}`, endpoint);\n      await rateLimiter();\n      return fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          ...Web3Storage.headers(token),\n          'Access-Control-Request-Headers': 'Link'\n        },\n        signal\n      });\n    }\n    let count = 0;\n    const size = maxResults > 100 ? 100 : maxResults;\n    for await (const res of paginator(listPage, service, {\n      before,\n      size\n    })) {\n      if (!res.ok) {\n        /* c8 ignore next 3 */\n        if (res.status === 429) {\n          throw new Error('rate limited');\n        }\n\n        /* c8 ignore next 2 */\n        const errorMessage = await res.json();\n        throw new Error(`${res.status} ${res.statusText} ${errorMessage ? '- ' + errorMessage.message : ''}`);\n      }\n      const page = await res.json();\n      for (const upload of page) {\n        if (++count > maxResults) {\n          return;\n        }\n        yield upload;\n      }\n    }\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Uploads files to web3.storage. Files are hashed in the client and uploaded as a single\n   * [Content Addressed Archive(CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * @example\n   * ```js\n   * const file = new File(['hello world'], 'hello.txt', { type: 'text/plain' })\n   * const cid = await client.put([file])\n   * ```\n   * @param {Iterable<Filelike>} files\n   * @param {PutOptions} [options]\n   */\n  put(files, options) {\n    return Web3Storage.put(this, files, options);\n  }\n\n  /**\n   * Uploads a CAR ([Content Addressed Archive](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md)) file to web3.storage.\n   * Takes a CarReader interface from @ipld/car\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * @example\n   * ```js\n   * import fs from 'fs'\n   * import { Readable } from 'stream'\n   * import { CarReader, CarWriter } from '@ipld/car'\n   * import * as raw from 'multiformats/codecs/raw'\n   * import { CID } from 'multiformats/cid'\n   * import { sha256 } from 'multiformats/hashes/sha2'\n   *\n   * async function getCar() {\n   *    const bytes = new TextEncoder().encode('random meaningless bytes')\n   *    const hash = await sha256.digest(raw.encode(bytes))\n   *    const cid = CID.create(1, raw.code, hash)\n   *\n   *    // create the writer and set the header with a single root\n   *    const { writer, out } = await CarWriter.create([cid])\n   *    Readable.from(out).pipe(fs.createWriteStream('example.car'))\n    *    // store a new block, creates a new file entry in the CAR archive\n   *    await writer.put({ cid, bytes })\n   *    await writer.close()\n    *    const inStream = fs.createReadStream('example.car')\n   *    // read and parse the entire stream in one go, this will cache the contents of\n   *    // the car in memory so is not suitable for large files.\n   *    const reader = await CarReader.fromIterable(inStream)\n   *    return reader\n   * }\n   *\n   * const car = await getCar()\n   * const cid = await client.putCar(car)\n   * ```\n   * @param {import('@ipld/car/api').CarReader} car\n   * @param {PutCarOptions} [options]\n   */\n  putCar(car, options) {\n    return Web3Storage.putCar(this, car, options);\n  }\n\n  /**\n   * Fetch the Content Addressed Archive by its root CID.\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   */\n  get(cid, options) {\n    return Web3Storage.get(this, cid, options);\n  }\n\n  /**\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   */\n  /* c8 ignore next 3 */\n  delete(cid, options) {\n    return Web3Storage.delete(this, cid, options);\n  }\n\n  /**\n   * Fetch info on Filecoin deals and IPFS pins that a given CID is replicated in.\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   */\n  status(cid, options) {\n    return Web3Storage.status(this, cid, options);\n  }\n\n  /**\n   * Find all uploads for this account. Use a `for await...of` loop to fetch them all.\n   * @example\n   * Fetch all the uploads\n   * ```js\n   * const uploads = []\n   * for await (const item of client.list()) {\n   *    uploads.push(item)\n   * }\n   * ```\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n   * @param {ListOptions} [opts]\n   * @returns {AsyncIterable<Upload>}\n   */\n  list(opts) {\n    return Web3Storage.list(this, opts);\n  }\n}\n\n/**\n * Map a UnixFSEntry to a File with a cid property.\n *\n * @param {UnixFSEntry} entry\n * @returns {Promise<Web3File>}\n */\nasync function toWeb3File({\n  content,\n  path,\n  cid\n}) {\n  const chunks = [];\n  for await (const chunk of content()) {\n    chunks.push(chunk);\n  }\n  const file = new File(chunks, toFilenameWithPath(path));\n  return Object.assign(file, {\n    cid: cid.toString()\n  });\n}\n\n/**\n * Trim the root cid from the path if there is anyting after it.\n * bafy...ic2q/path/to/pinpie.jpg => path/to/pinpie.jpg\n *         bafy...ic2q/pinpie.jpg => pinpie.jpg\n *                    bafk...52zy => bafk...52zy\n * @param {string} unixFsPath\n * @returns {string}\n */\nfunction toFilenameWithPath(unixFsPath) {\n  const slashIndex = unixFsPath.indexOf('/');\n  return slashIndex === -1 ? unixFsPath : unixFsPath.substring(slashIndex + 1);\n}\n\n/**\n * Add car unpacking smarts to the response object,\n * @param {Response} res\n * @returns {Web3Response}\n */\nfunction toWeb3Response(res) {\n  const response = Object.assign(res, {\n    unixFsIterator: async function* () {\n      if (!res.ok) {\n        throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { \"ok\": false } on the Response object before calling .unixFsIterator`);\n      }\n      /* c8 ignore next 3 */\n      if (!res.body) {\n        throw new Error('No body on response');\n      }\n      const blockstore = new Blockstore();\n      try {\n        for await (const entry of unpackStream(res.body, {\n          blockstore\n        })) {\n          yield entry;\n        }\n      } finally {\n        await blockstore.close();\n      }\n    },\n    files: async () => {\n      if (!res.ok) {\n        throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { \"ok\": false } on the Response object before calling .files`);\n      }\n      const files = [];\n      // @ts-ignore we're using the enriched response here\n      for await (const entry of response.unixFsIterator()) {\n        if (entry.type === 'directory') {\n          continue;\n        }\n        const file = await toWeb3File(entry);\n        files.push(file);\n      }\n      return files;\n    }\n  });\n  return response;\n}\n\n/**\n * Convert the passed file to an \"import candidate\" - an object suitable for\n * passing to the ipfs-unixfs-importer. Note: content is an accessor so that\n * the stream is only created when needed.\n *\n * @param {Filelike} file\n */\nfunction toImportCandidate(file) {\n  /** @type {ReadableStream} */\n  let stream;\n  return {\n    path: file.name,\n    get content() {\n      stream = stream || file.stream();\n      return stream;\n    }\n  };\n}\n\n/**\n * Follow Link headers on a Response, to fetch all the things.\n *\n * @param {(service: Service, opts: any) => Promise<Response>} fn\n * @param {Service} service\n * @param {{}} opts\n */\nasync function* paginator(fn, service, opts) {\n  let res = await fn(service, opts);\n  yield res;\n  let link = parseLinkHeader(res.headers.get('Link') || '');\n  // @ts-ignore\n  while (link && link.next) {\n    // @ts-ignore\n    res = await fn(service, link.next);\n    yield res;\n    link = parseLinkHeader(res.headers.get('Link') || '');\n  }\n}\nexport { Web3Storage, File, Blob, filesFromPath, getFilesFromPath };\n\n/**\n * Just to verify API compatibility.\n * TODO: convert lib to a regular class that can be type checked.\n * @type {API}\n */\nconst api = Web3Storage;\nvoid api; // eslint-disable-line no-void","map":{"version":3,"names":["transform","pRetry","AbortError","pack","parseLinkHeader","unpackStream","TreewalkCarSplitter","CarReader","filesFromPath","getFilesFromPath","throttledQueue","fetch","_fetch","File","Blob","Blockstore","MAX_PUT_RETRIES","MAX_CONCURRENT_UPLOADS","DEFAULT_CHUNK_SIZE","MAX_BLOCK_SIZE","MAX_CHUNK_SIZE","RATE_LIMIT_REQUESTS","RATE_LIMIT_PERIOD","createRateLimiter","throttle","globalRateLimiter","Web3Storage","constructor","token","endpoint","URL","rateLimiter","headers","Error","Authorization","put","files","onRootCidReady","onStoredChunk","maxRetries","maxChunkSize","wrapWithDirectory","name","signal","blockstore","out","root","input","Array","from","map","toImportCandidate","maxChildrenPerNode","toString","car","fromIterable","putCar","close","decoders","targetSize","url","encodeURIComponent","roots","getRoots","length","carRoot","splitter","onCarChunk","carParts","part","push","carFile","type","res","response","method","body","err","aborted","status","json","ok","message","cid","retries","size","upload","_","cars","get","options","toWeb3Response","delete","console","log","undefined","statusText","list","service","before","Date","toISOString","maxResults","Infinity","listPage","search","URLSearchParams","count","paginator","errorMessage","page","opts","toWeb3File","content","path","chunks","chunk","file","toFilenameWithPath","Object","assign","unixFsPath","slashIndex","indexOf","substring","unixFsIterator","entry","stream","fn","link","next","api"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/web3.storage/src/lib.js"],"sourcesContent":["/**\n * A client library for the https://web3.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://web3.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { Web3Storage, File } from 'web3.storage'\n * const client = new Web3Storage({ token: API_TOKEN })\n *\n * const cid = await client.put([new File(['hello world'], 'hello.txt', { type: 'text/plain' })])\n * ```\n * @module\n */\nimport { transform } from 'streaming-iterables'\nimport pRetry, { AbortError } from 'p-retry'\nimport { pack } from 'ipfs-car/pack'\nimport { parseLinkHeader } from '@web3-storage/parse-link-header'\nimport { unpackStream } from 'ipfs-car/unpack'\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\nimport { CarReader } from '@ipld/car'\nimport { filesFromPath, getFilesFromPath } from 'files-from-path'\nimport throttledQueue from 'throttled-queue'\nimport {\n  fetch as _fetch,\n  File,\n  Blob,\n  Blockstore\n} from './platform.js'\n\nconst MAX_PUT_RETRIES = 5\nconst MAX_CONCURRENT_UPLOADS = 3\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024 * 10 // chunk to ~10MB CARs\nconst MAX_BLOCK_SIZE = 1048576\nconst MAX_CHUNK_SIZE = 104857600\n// These match what is enforced server-side\nconst RATE_LIMIT_REQUESTS = 30\nconst RATE_LIMIT_PERIOD = 10 * 1000\n\n/** @typedef { import('./lib/interface.js').API } API */\n/** @typedef { import('./lib/interface.js').Status} Status */\n/** @typedef { import('./lib/interface.js').Upload} Upload */\n/** @typedef { import('./lib/interface.js').Service } Service */\n/** @typedef { import('./lib/interface.js').Web3File} Web3File */\n/** @typedef { import('./lib/interface.js').Filelike } Filelike */\n/** @typedef { import('./lib/interface.js').CIDString} CIDString */\n/** @typedef { import('./lib/interface.js').RequestOptions} RequestOptions */\n/** @typedef { import('./lib/interface.js').PutOptions} PutOptions */\n/** @typedef { import('./lib/interface.js').PutCarOptions} PutCarOptions */\n/** @typedef { import('./lib/interface.js').ListOptions} ListOptions */\n/** @typedef { import('./lib/interface.js').RateLimiter } RateLimiter */\n/** @typedef { import('./lib/interface.js').UnixFSEntry} UnixFSEntry */\n/** @typedef { import('./lib/interface.js').Web3Response} Web3Response */\n\n/**\n * Creates a rate limiter which limits at the same rate as is enforced\n * server-side, to allow the client to avoid exceeding the requests limit and\n * being blocked for 30 seconds.\n * @returns {RateLimiter}\n */\nexport function createRateLimiter () {\n  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD)\n  return () => throttle(() => {})\n}\n\n/**\n * Rate limiter used by static API if no rate limiter is passed. Note that each\n * instance of the Web3Storage class gets it's own limiter if none is passed.\n * This is because rate limits are enforced per API token.\n */\nconst globalRateLimiter = createRateLimiter()\n\n/**\n * @implements Service\n */\nclass Web3Storage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { Web3Storage } from 'web3.storage'\n   * const client = new Web3Storage({ token: API_TOKEN })\n   * ```\n   *\n    @param {Service} options\n   */\n  constructor ({\n    token,\n    endpoint = new URL('https://api.web3.storage'),\n    rateLimiter,\n    fetch = _fetch\n  }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = endpoint\n    /**\n     * @readonly\n     */\n    this.rateLimiter = rateLimiter || createRateLimiter()\n    /**\n     * Optional custom fetch function. Defaults to global fetch in browsers or @web-std/fetch on node.\n     * @readonly\n     */\n    this.fetch = fetch\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   * @returns {Record<string, string>}\n   */\n  static headers (token) {\n    if (!token) throw new Error('missing token')\n    return {\n      Authorization: `Bearer ${token}`,\n      'X-Client': 'web3.storage/js'\n    }\n  }\n\n  /**\n   * @param {Service} service\n   * @param {Iterable<Filelike>} files\n   * @param {PutOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async put ({ endpoint, token, rateLimiter = globalRateLimiter, fetch = _fetch }, files, {\n    onRootCidReady,\n    onStoredChunk,\n    maxRetries = MAX_PUT_RETRIES,\n    maxChunkSize = DEFAULT_CHUNK_SIZE,\n    wrapWithDirectory = true,\n    name,\n    signal\n  } = {}) {\n    if (maxChunkSize >= MAX_CHUNK_SIZE || maxChunkSize < MAX_BLOCK_SIZE) {\n      throw new Error('maximum chunk size must be less than 100MiB and greater than or equal to 1MB')\n    }\n    const blockstore = new Blockstore()\n    try {\n      const { out, root } = await pack({\n        input: Array.from(files).map(toImportCandidate),\n        blockstore,\n        wrapWithDirectory,\n        maxChunkSize: MAX_BLOCK_SIZE,\n        maxChildrenPerNode: 1024\n      })\n      onRootCidReady && onRootCidReady(root.toString())\n      const car = await CarReader.fromIterable(out)\n      return await Web3Storage.putCar({ endpoint, token, rateLimiter, fetch }, car, { onStoredChunk, maxRetries, maxChunkSize, name, signal })\n    } finally {\n      await blockstore.close()\n    }\n  }\n\n  /**\n   * @param {Service} service\n   * @param {import('@ipld/car/api').CarReader} car\n   * @param {PutCarOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async putCar ({ endpoint, token, rateLimiter = globalRateLimiter, fetch = _fetch }, car, {\n    name,\n    onStoredChunk,\n    maxRetries = MAX_PUT_RETRIES,\n    maxChunkSize = DEFAULT_CHUNK_SIZE,\n    decoders,\n    signal\n  } = {}) {\n    if (maxChunkSize >= MAX_CHUNK_SIZE || maxChunkSize < MAX_BLOCK_SIZE) {\n      throw new Error('maximum chunk size must be less than 100MiB and greater than or equal to 1MB')\n    }\n    const targetSize = maxChunkSize\n    const url = new URL('car', endpoint)\n    let headers = Web3Storage.headers(token)\n\n    if (name) {\n      headers = { ...headers, 'X-Name': encodeURIComponent(name) }\n    }\n\n    const roots = await car.getRoots()\n    if (roots[0] == null) {\n      throw new Error('missing root CID')\n    }\n    if (roots.length > 1) {\n      throw new Error('too many roots')\n    }\n\n    const carRoot = roots[0].toString()\n    const splitter = new TreewalkCarSplitter(car, targetSize, { decoders })\n\n    /**\n     * @param {AsyncIterable<Uint8Array>} car\n     * @returns {Promise<CIDString>}\n     */\n    const onCarChunk = async car => {\n      const carParts = []\n      for await (const part of car) {\n        carParts.push(part)\n      }\n\n      const carFile = new Blob(carParts, { type: 'application/vnd.ipld.car' })\n      const res = await pRetry(\n        async () => {\n          await rateLimiter()\n          /** @type {Response} */\n          let response\n          try {\n            response = await fetch(url.toString(), {\n              method: 'POST',\n              headers,\n              body: carFile,\n              signal\n            })\n          } catch (/** @type {any} */err) {\n            throw signal && signal.aborted ? new AbortError(err) : err\n          }\n          /* c8 ignore next 3 */\n          if (response.status === 429) {\n            throw new Error('rate limited')\n          }\n          const res = await response.json()\n          if (!response.ok) {\n            throw new Error(res.message)\n          }\n\n          if (res.cid !== carRoot) {\n            throw new Error(`root CID mismatch, expected: ${carRoot}, received: ${res.cid}`)\n          }\n          return res.cid\n        },\n        { retries: maxRetries }\n      )\n\n      onStoredChunk && onStoredChunk(carFile.size)\n      return res\n    }\n\n    const upload = transform(MAX_CONCURRENT_UPLOADS, onCarChunk)\n    for await (const _ of upload(splitter.cars())) {} // eslint-disable-line\n    return carRoot\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<Web3Response | null>}\n   */\n  static async get ({ endpoint, token, rateLimiter = globalRateLimiter, fetch = _fetch }, cid, options = {}) {\n    const url = new URL(`car/${cid}`, endpoint)\n    await rateLimiter()\n    const res = await fetch(url.toString(), {\n      method: 'GET',\n      headers: Web3Storage.headers(token),\n      signal: options.signal\n    })\n    /* c8 ignore next 3 */\n    if (res.status === 429) {\n      throw new Error('rate limited')\n    }\n    return toWeb3Response(res)\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  /* c8 ignore next 4 */\n  static async delete ({ endpoint, token, rateLimiter = globalRateLimiter }, cid, options = {}) {\n    console.log('Not deleting', cid, endpoint, token, rateLimiter, options)\n    throw Error('.delete not implemented yet')\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<Status | undefined>}\n   */\n  static async status ({ endpoint, token, rateLimiter = globalRateLimiter, fetch = _fetch }, cid, options = {}) {\n    const url = new URL(`status/${cid}`, endpoint)\n    await rateLimiter()\n    const res = await fetch(url.toString(), {\n      method: 'GET',\n      headers: Web3Storage.headers(token),\n      signal: options.signal\n    })\n    /* c8 ignore next 3 */\n    if (res.status === 429) {\n      throw new Error('rate limited')\n    }\n    if (res.status === 404) {\n      return undefined\n    }\n    if (!res.ok) {\n      throw new Error(res.statusText)\n    }\n    return res.json()\n  }\n\n  /**\n   * @param {Service} service\n   * @param {ListOptions} [opts]\n   * @returns {AsyncIterable<Upload>}\n   */\n  static async * list (service, { before = new Date().toISOString(), maxResults = Infinity, signal } = {}) {\n    /**\n     * @param {Service} service\n     * @param {{before: string, size: number}} opts\n     * @returns {Promise<Response>}\n     */\n    async function listPage ({ endpoint, token, rateLimiter = globalRateLimiter, fetch = _fetch }, { before, size }) {\n      const search = new URLSearchParams({ before, size: size.toString() })\n      const url = new URL(`user/uploads?${search}`, endpoint)\n      await rateLimiter()\n      return fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          ...Web3Storage.headers(token),\n          'Access-Control-Request-Headers': 'Link'\n        },\n        signal\n      })\n    }\n    let count = 0\n    const size = maxResults > 100 ? 100 : maxResults\n    for await (const res of paginator(listPage, service, { before, size })) {\n      if (!res.ok) {\n        /* c8 ignore next 3 */\n        if (res.status === 429) {\n          throw new Error('rate limited')\n        }\n\n        /* c8 ignore next 2 */\n        const errorMessage = await res.json()\n        throw new Error(`${res.status} ${res.statusText} ${errorMessage ? '- ' + errorMessage.message : ''}`)\n      }\n      const page = await res.json()\n      for (const upload of page) {\n        if (++count > maxResults) {\n          return\n        }\n        yield upload\n      }\n    }\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Uploads files to web3.storage. Files are hashed in the client and uploaded as a single\n   * [Content Addressed Archive(CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * @example\n   * ```js\n   * const file = new File(['hello world'], 'hello.txt', { type: 'text/plain' })\n   * const cid = await client.put([file])\n   * ```\n   * @param {Iterable<Filelike>} files\n   * @param {PutOptions} [options]\n   */\n  put (files, options) {\n    return Web3Storage.put(this, files, options)\n  }\n\n  /**\n   * Uploads a CAR ([Content Addressed Archive](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md)) file to web3.storage.\n   * Takes a CarReader interface from @ipld/car\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * @example\n   * ```js\n   * import fs from 'fs'\n   * import { Readable } from 'stream'\n   * import { CarReader, CarWriter } from '@ipld/car'\n   * import * as raw from 'multiformats/codecs/raw'\n   * import { CID } from 'multiformats/cid'\n   * import { sha256 } from 'multiformats/hashes/sha2'\n   *\n   * async function getCar() {\n   *    const bytes = new TextEncoder().encode('random meaningless bytes')\n   *    const hash = await sha256.digest(raw.encode(bytes))\n   *    const cid = CID.create(1, raw.code, hash)\n   *\n   *    // create the writer and set the header with a single root\n   *    const { writer, out } = await CarWriter.create([cid])\n   *    Readable.from(out).pipe(fs.createWriteStream('example.car'))\n\n   *    // store a new block, creates a new file entry in the CAR archive\n   *    await writer.put({ cid, bytes })\n   *    await writer.close()\n\n   *    const inStream = fs.createReadStream('example.car')\n   *    // read and parse the entire stream in one go, this will cache the contents of\n   *    // the car in memory so is not suitable for large files.\n   *    const reader = await CarReader.fromIterable(inStream)\n   *    return reader\n   * }\n   *\n   * const car = await getCar()\n   * const cid = await client.putCar(car)\n   * ```\n   * @param {import('@ipld/car/api').CarReader} car\n   * @param {PutCarOptions} [options]\n   */\n  putCar (car, options) {\n    return Web3Storage.putCar(this, car, options)\n  }\n\n  /**\n   * Fetch the Content Addressed Archive by its root CID.\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   */\n  get (cid, options) {\n    return Web3Storage.get(this, cid, options)\n  }\n\n  /**\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   */\n  /* c8 ignore next 3 */\n  delete (cid, options) {\n    return Web3Storage.delete(this, cid, options)\n  }\n\n  /**\n   * Fetch info on Filecoin deals and IPFS pins that a given CID is replicated in.\n   * @param {CIDString} cid\n   * @param {RequestOptions} [options]\n   */\n  status (cid, options) {\n    return Web3Storage.status(this, cid, options)\n  }\n\n  /**\n   * Find all uploads for this account. Use a `for await...of` loop to fetch them all.\n   * @example\n   * Fetch all the uploads\n   * ```js\n   * const uploads = []\n   * for await (const item of client.list()) {\n   *    uploads.push(item)\n   * }\n   * ```\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n   * @param {ListOptions} [opts]\n   * @returns {AsyncIterable<Upload>}\n   */\n  list (opts) {\n    return Web3Storage.list(this, opts)\n  }\n}\n\n/**\n * Map a UnixFSEntry to a File with a cid property.\n *\n * @param {UnixFSEntry} entry\n * @returns {Promise<Web3File>}\n */\nasync function toWeb3File ({ content, path, cid }) {\n  const chunks = []\n  for await (const chunk of content()) {\n    chunks.push(chunk)\n  }\n  const file = new File(chunks, toFilenameWithPath(path))\n  return Object.assign(file, { cid: cid.toString() })\n}\n\n/**\n * Trim the root cid from the path if there is anyting after it.\n * bafy...ic2q/path/to/pinpie.jpg => path/to/pinpie.jpg\n *         bafy...ic2q/pinpie.jpg => pinpie.jpg\n *                    bafk...52zy => bafk...52zy\n * @param {string} unixFsPath\n * @returns {string}\n */\nfunction toFilenameWithPath (unixFsPath) {\n  const slashIndex = unixFsPath.indexOf('/')\n  return slashIndex === -1 ? unixFsPath : unixFsPath.substring(slashIndex + 1)\n}\n\n/**\n * Add car unpacking smarts to the response object,\n * @param {Response} res\n * @returns {Web3Response}\n */\nfunction toWeb3Response (res) {\n  const response = Object.assign(res, {\n    unixFsIterator: async function * () {\n      if (!res.ok) {\n        throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { \"ok\": false } on the Response object before calling .unixFsIterator`)\n      }\n      /* c8 ignore next 3 */\n      if (!res.body) {\n        throw new Error('No body on response')\n      }\n      const blockstore = new Blockstore()\n      try {\n        for await (const entry of unpackStream(res.body, { blockstore })) {\n          yield entry\n        }\n      } finally {\n        await blockstore.close()\n      }\n    },\n    files: async () => {\n      if (!res.ok) {\n        throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { \"ok\": false } on the Response object before calling .files`)\n      }\n      const files = []\n      // @ts-ignore we're using the enriched response here\n      for await (const entry of response.unixFsIterator()) {\n        if (entry.type === 'directory') {\n          continue\n        }\n        const file = await toWeb3File(entry)\n        files.push(file)\n      }\n      return files\n    }\n  })\n  return response\n}\n\n/**\n * Convert the passed file to an \"import candidate\" - an object suitable for\n * passing to the ipfs-unixfs-importer. Note: content is an accessor so that\n * the stream is only created when needed.\n *\n * @param {Filelike} file\n */\nfunction toImportCandidate (file) {\n  /** @type {ReadableStream} */\n  let stream\n  return {\n    path: file.name,\n    get content () {\n      stream = stream || file.stream()\n      return stream\n    }\n  }\n}\n\n/**\n * Follow Link headers on a Response, to fetch all the things.\n *\n * @param {(service: Service, opts: any) => Promise<Response>} fn\n * @param {Service} service\n * @param {{}} opts\n */\nasync function * paginator (fn, service, opts) {\n  let res = await fn(service, opts)\n  yield res\n  let link = parseLinkHeader(res.headers.get('Link') || '')\n  // @ts-ignore\n  while (link && link.next) {\n    // @ts-ignore\n    res = await fn(service, link.next)\n    yield res\n    link = parseLinkHeader(res.headers.get('Link') || '')\n  }\n}\n\nexport { Web3Storage, File, Blob, filesFromPath, getFilesFromPath }\n\n/**\n * Just to verify API compatibility.\n * TODO: convert lib to a regular class that can be type checked.\n * @type {API}\n */\nconst api = Web3Storage\nvoid api // eslint-disable-line no-void\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}