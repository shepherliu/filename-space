{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport random from './random.js';\nimport { p2s as concatSalt } from '../lib/buffer_utils.js';\nimport { encode as base64url } from './base64url.js';\nimport { wrap, unwrap } from './aeskw.js';\nimport checkP2s from '../lib/check_p2s.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nfunction getCryptoKey(key, alg) {\n  if (key instanceof Uint8Array) {\n    return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);\n  }\n  if (isCryptoKey(key)) {\n    checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');\n    return key;\n  }\n  throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\nasync function deriveKey(p2s, alg, p2c, key) {\n  checkP2s(p2s);\n  const salt = concatSalt(alg, p2s);\n  const keylen = parseInt(alg.slice(13, 16), 10);\n  const subtleAlg = {\n    hash: `SHA-${alg.slice(8, 11)}`,\n    iterations: p2c,\n    name: 'PBKDF2',\n    salt\n  };\n  const wrapAlg = {\n    length: keylen,\n    name: 'AES-KW'\n  };\n  const cryptoKey = await getCryptoKey(key, alg);\n  if (cryptoKey.usages.includes('deriveBits')) {\n    return new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));\n  }\n  if (cryptoKey.usages.includes('deriveKey')) {\n    return crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);\n  }\n  throw new TypeError('PBKDF2 key \"usages\" must include \"deriveBits\" or \"deriveKey\"');\n}\nexport const encrypt = async (alg, key, cek, p2c = 2048, p2s = random(new Uint8Array(16))) => {\n  const derived = await deriveKey(p2s, alg, p2c, key);\n  const encryptedKey = await wrap(alg.slice(-6), derived, cek);\n  return {\n    encryptedKey,\n    p2c,\n    p2s: base64url(p2s)\n  };\n};\nexport const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {\n  const derived = await deriveKey(p2s, alg, p2c, key);\n  return unwrap(alg.slice(-6), derived, encryptedKey);\n};","map":{"version":3,"names":["random","p2s","concatSalt","encode","base64url","wrap","unwrap","checkP2s","crypto","isCryptoKey","checkEncCryptoKey","invalidKeyInput","types","getCryptoKey","key","alg","Uint8Array","subtle","importKey","TypeError","deriveKey","p2c","salt","keylen","parseInt","slice","subtleAlg","hash","iterations","name","wrapAlg","length","cryptoKey","usages","includes","deriveBits","encrypt","cek","derived","encryptedKey","decrypt"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/jose/dist/browser/runtime/pbes2kw.js"],"sourcesContent":["import random from './random.js';\nimport { p2s as concatSalt } from '../lib/buffer_utils.js';\nimport { encode as base64url } from './base64url.js';\nimport { wrap, unwrap } from './aeskw.js';\nimport checkP2s from '../lib/check_p2s.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nfunction getCryptoKey(key, alg) {\n    if (key instanceof Uint8Array) {\n        return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);\n    }\n    if (isCryptoKey(key)) {\n        checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');\n        return key;\n    }\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\nasync function deriveKey(p2s, alg, p2c, key) {\n    checkP2s(p2s);\n    const salt = concatSalt(alg, p2s);\n    const keylen = parseInt(alg.slice(13, 16), 10);\n    const subtleAlg = {\n        hash: `SHA-${alg.slice(8, 11)}`,\n        iterations: p2c,\n        name: 'PBKDF2',\n        salt,\n    };\n    const wrapAlg = {\n        length: keylen,\n        name: 'AES-KW',\n    };\n    const cryptoKey = await getCryptoKey(key, alg);\n    if (cryptoKey.usages.includes('deriveBits')) {\n        return new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));\n    }\n    if (cryptoKey.usages.includes('deriveKey')) {\n        return crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);\n    }\n    throw new TypeError('PBKDF2 key \"usages\" must include \"deriveBits\" or \"deriveKey\"');\n}\nexport const encrypt = async (alg, key, cek, p2c = 2048, p2s = random(new Uint8Array(16))) => {\n    const derived = await deriveKey(p2s, alg, p2c, key);\n    const encryptedKey = await wrap(alg.slice(-6), derived, cek);\n    return { encryptedKey, p2c, p2s: base64url(p2s) };\n};\nexport const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {\n    const derived = await deriveKey(p2s, alg, p2c, key);\n    return unwrap(alg.slice(-6), derived, encryptedKey);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}