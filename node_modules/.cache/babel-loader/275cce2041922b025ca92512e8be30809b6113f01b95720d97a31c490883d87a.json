{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.typed-array.find-last.js\");\nrequire(\"core-js/modules/es.typed-array.find-last-index.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nconst ConsumableBuffer = require('./consumable-buffer');\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\n/**\n * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n */\nfunction wrapHash(hashFn) {\n  /**\n   * @param {InfiniteHash | Uint8Array} value\n   */\n  function hashing(value) {\n    if (value instanceof InfiniteHash) {\n      // already a hash. return it\n      return value;\n    } else {\n      return new InfiniteHash(value, hashFn);\n    }\n  }\n  return hashing;\n}\nclass InfiniteHash {\n  /**\n   *\n   * @param {Uint8Array} value\n   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n   */\n  constructor(value, hashFn) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('can only hash Uint8Arrays');\n    }\n    this._value = value;\n    this._hashFn = hashFn;\n    this._depth = -1;\n    this._availableBits = 0;\n    this._currentBufferIndex = 0;\n\n    /** @type {ConsumableBuffer[]} */\n    this._buffers = [];\n  }\n\n  /**\n   * @param {number} bits\n   */\n  async take(bits) {\n    let pendingBits = bits;\n    while (this._availableBits < pendingBits) {\n      await this._produceMoreBits();\n    }\n    let result = 0;\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const available = Math.min(hash.availableBits(), pendingBits);\n      const took = hash.take(available);\n      result = (result << available) + took;\n      pendingBits -= available;\n      this._availableBits -= available;\n      if (hash.availableBits() === 0) {\n        this._currentBufferIndex++;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake(bits) {\n    let pendingBits = bits;\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);\n      hash.untake(availableForUntake);\n      pendingBits -= availableForUntake;\n      this._availableBits += availableForUntake;\n      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n        this._depth--;\n        this._currentBufferIndex--;\n      }\n    }\n  }\n  async _produceMoreBits() {\n    this._depth++;\n    const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;\n    const hashValue = await this._hashFn(value);\n    const buffer = new ConsumableBuffer(hashValue);\n    this._buffers.push(buffer);\n    this._availableBits += buffer.availableBits();\n  }\n}\nmodule.exports = wrapHash;\nmodule.exports.InfiniteHash = InfiniteHash;","map":{"version":3,"names":["ConsumableBuffer","require","concat","uint8ArrayConcat","wrapHash","hashFn","hashing","value","InfiniteHash","constructor","Uint8Array","Error","_value","_hashFn","_depth","_availableBits","_currentBufferIndex","_buffers","take","bits","pendingBits","_produceMoreBits","result","hash","available","Math","min","availableBits","took","untake","availableForUntake","totalBits","from","hashValue","buffer","push","module","exports"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/hamt-sharding/src/consumable-hash.js"],"sourcesContent":["'use strict'\n\nconst ConsumableBuffer = require('./consumable-buffer')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\n/**\n * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n */\nfunction wrapHash (hashFn) {\n  /**\n   * @param {InfiniteHash | Uint8Array} value\n   */\n  function hashing (value) {\n    if (value instanceof InfiniteHash) {\n      // already a hash. return it\n      return value\n    } else {\n      return new InfiniteHash(value, hashFn)\n    }\n  }\n\n  return hashing\n}\n\nclass InfiniteHash {\n  /**\n   *\n   * @param {Uint8Array} value\n   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n   */\n  constructor (value, hashFn) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('can only hash Uint8Arrays')\n    }\n\n    this._value = value\n    this._hashFn = hashFn\n    this._depth = -1\n    this._availableBits = 0\n    this._currentBufferIndex = 0\n\n    /** @type {ConsumableBuffer[]} */\n    this._buffers = []\n  }\n\n  /**\n   * @param {number} bits\n   */\n  async take (bits) {\n    let pendingBits = bits\n\n    while (this._availableBits < pendingBits) {\n      await this._produceMoreBits()\n    }\n\n    let result = 0\n\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex]\n      const available = Math.min(hash.availableBits(), pendingBits)\n      const took = hash.take(available)\n      result = (result << available) + took\n      pendingBits -= available\n      this._availableBits -= available\n\n      if (hash.availableBits() === 0) {\n        this._currentBufferIndex++\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake (bits) {\n    let pendingBits = bits\n\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex]\n      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits)\n      hash.untake(availableForUntake)\n      pendingBits -= availableForUntake\n      this._availableBits += availableForUntake\n\n      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n        this._depth--\n        this._currentBufferIndex--\n      }\n    }\n  }\n\n  async _produceMoreBits () {\n    this._depth++\n\n    const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value\n    const hashValue = await this._hashFn(value)\n    const buffer = new ConsumableBuffer(hashValue)\n\n    this._buffers.push(buffer)\n    this._availableBits += buffer.availableBits()\n  }\n}\n\nmodule.exports = wrapHash\nmodule.exports.InfiniteHash = InfiniteHash\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}