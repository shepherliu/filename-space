{"ast":null,"code":"import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\nexport default bufferImporter;","map":{"version":3,"names":["UnixFS","persist","dagPb","raw","bufferImporter","file","block","options","buffer","content","progress","length","path","unixfs","opts","codec","cidVersion","hasher","onlyHash","rawLeaves","type","leafType","data","encode","Data","marshal","Links","cid","size"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/buffer-importer.js"],"sourcesContent":["import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\nexport default bufferImporter;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,GAAG,MAAM,yBAAyB;AAC9C,gBAAgBC,cAAc,CAACC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACnD,WAAW,IAAIC,MAAM,IAAIH,IAAI,CAACI,OAAO,EAAE;IACrC,MAAM,YAAY;MAChBF,OAAO,CAACG,QAAQ,CAACF,MAAM,CAACG,MAAM,EAAEN,IAAI,CAACO,IAAI,CAAC;MAC1C,IAAIC,MAAM;MACV,MAAMC,IAAI,GAAG;QACXC,KAAK,EAAEb,KAAK;QACZc,UAAU,EAAET,OAAO,CAACS,UAAU;QAC9BC,MAAM,EAAEV,OAAO,CAACU,MAAM;QACtBC,QAAQ,EAAEX,OAAO,CAACW;MACpB,CAAC;MACD,IAAIX,OAAO,CAACY,SAAS,EAAE;QACrBL,IAAI,CAACC,KAAK,GAAGZ,GAAG;QAChBW,IAAI,CAACE,UAAU,GAAG,CAAC;MACrB,CAAC,MAAM;QACLH,MAAM,GAAG,IAAIb,MAAM,CAAC;UAClBoB,IAAI,EAAEb,OAAO,CAACc,QAAQ;UACtBC,IAAI,EAAEd;QACR,CAAC,CAAC;QACFA,MAAM,GAAGN,KAAK,CAACqB,MAAM,CAAC;UACpBC,IAAI,EAAEX,MAAM,CAACY,OAAO,EAAE;UACtBC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;MACA,OAAO;QACLC,GAAG,EAAE,MAAM1B,OAAO,CAACO,MAAM,EAAEF,KAAK,EAAEQ,IAAI,CAAC;QACvCD,MAAM;QACNe,IAAI,EAAEpB,MAAM,CAACG;MACf,CAAC;IACH,CAAC;EACH;AACF;AACA,eAAeP,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}