{"ast":null,"code":"'use strict';\n\n// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\nconst BITS_PER_BYTE = 7;\nmodule.exports = class SparseArray {\n  constructor() {\n    this._bitArrays = [];\n    this._data = [];\n    this._length = 0;\n    this._changedLength = false;\n    this._changedData = false;\n  }\n  set(index, value) {\n    let pos = this._internalPositionFor(index, false);\n    if (value === undefined) {\n      // unsetting\n      if (pos !== -1) {\n        // remove item from bit array and array itself\n        this._unsetInternalPos(pos);\n        this._unsetBit(index);\n        this._changedLength = true;\n        this._changedData = true;\n      }\n    } else {\n      let needsSort = false;\n      if (pos === -1) {\n        pos = this._data.length;\n        this._setBit(index);\n        this._changedData = true;\n      } else {\n        needsSort = true;\n      }\n      this._setInternalPos(pos, index, value, needsSort);\n      this._changedLength = true;\n    }\n  }\n  unset(index) {\n    this.set(index, undefined);\n  }\n  get(index) {\n    this._sortData();\n    const pos = this._internalPositionFor(index, true);\n    if (pos === -1) {\n      return undefined;\n    }\n    return this._data[pos][1];\n  }\n  push(value) {\n    this.set(this.length, value);\n    return this.length;\n  }\n  get length() {\n    this._sortData();\n    if (this._changedLength) {\n      const last = this._data[this._data.length - 1];\n      this._length = last ? last[0] + 1 : 0;\n      this._changedLength = false;\n    }\n    return this._length;\n  }\n  forEach(iterator) {\n    let i = 0;\n    while (i < this.length) {\n      iterator(this.get(i), i, this);\n      i++;\n    }\n  }\n  map(iterator) {\n    let i = 0;\n    let mapped = new Array(this.length);\n    while (i < this.length) {\n      mapped[i] = iterator(this.get(i), i, this);\n      i++;\n    }\n    return mapped;\n  }\n  reduce(reducer, initialValue) {\n    let i = 0;\n    let acc = initialValue;\n    while (i < this.length) {\n      const value = this.get(i);\n      acc = reducer(acc, value, i);\n      i++;\n    }\n    return acc;\n  }\n  find(finder) {\n    let i = 0,\n      found,\n      last;\n    while (i < this.length && !found) {\n      last = this.get(i);\n      found = finder(last);\n      i++;\n    }\n    return found ? last : undefined;\n  }\n  _internalPositionFor(index, noCreate) {\n    const bytePos = this._bytePosFor(index, noCreate);\n    if (bytePos >= this._bitArrays.length) {\n      return -1;\n    }\n    const byte = this._bitArrays[bytePos];\n    const bitPos = index - bytePos * BITS_PER_BYTE;\n    const exists = (byte & 1 << bitPos) > 0;\n    if (!exists) {\n      return -1;\n    }\n    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);\n    const mask = ~(0xffffffff << bitPos + 1);\n    const bytePopCount = popCount(byte & mask);\n    const arrayPos = previousPopCount + bytePopCount - 1;\n    return arrayPos;\n  }\n  _bytePosFor(index, noCreate) {\n    const bytePos = Math.floor(index / BITS_PER_BYTE);\n    const targetLength = bytePos + 1;\n    while (!noCreate && this._bitArrays.length < targetLength) {\n      this._bitArrays.push(0);\n    }\n    return bytePos;\n  }\n  _setBit(index) {\n    const bytePos = this._bytePosFor(index, false);\n    this._bitArrays[bytePos] |= 1 << index - bytePos * BITS_PER_BYTE;\n  }\n  _unsetBit(index) {\n    const bytePos = this._bytePosFor(index, false);\n    this._bitArrays[bytePos] &= ~(1 << index - bytePos * BITS_PER_BYTE);\n  }\n  _setInternalPos(pos, index, value, needsSort) {\n    const data = this._data;\n    const elem = [index, value];\n    if (needsSort) {\n      this._sortData();\n      data[pos] = elem;\n    } else {\n      // new element. just shove it into the array\n      // but be nice about where we shove it\n      // in order to make sorting it later easier\n      if (data.length) {\n        if (data[data.length - 1][0] >= index) {\n          data.push(elem);\n        } else if (data[0][0] <= index) {\n          data.unshift(elem);\n        } else {\n          const randomIndex = Math.round(data.length / 2);\n          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));\n        }\n      } else {\n        this._data.push(elem);\n      }\n      this._changedData = true;\n      this._changedLength = true;\n    }\n  }\n  _unsetInternalPos(pos) {\n    this._data.splice(pos, 1);\n  }\n  _sortData() {\n    if (this._changedData) {\n      this._data.sort(sortInternal);\n    }\n    this._changedData = false;\n  }\n  bitField() {\n    const bytes = [];\n    let pendingBitsForResultingByte = 8;\n    let pendingBitsForNewByte = 0;\n    let resultingByte = 0;\n    let newByte;\n    const pending = this._bitArrays.slice();\n    while (pending.length || pendingBitsForNewByte) {\n      if (pendingBitsForNewByte === 0) {\n        newByte = pending.shift();\n        pendingBitsForNewByte = 7;\n      }\n      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);\n      const mask = ~(0b11111111 << usingBits);\n      const masked = newByte & mask;\n      resultingByte |= masked << 8 - pendingBitsForResultingByte;\n      newByte = newByte >>> usingBits;\n      pendingBitsForNewByte -= usingBits;\n      pendingBitsForResultingByte -= usingBits;\n      if (!pendingBitsForResultingByte || !pendingBitsForNewByte && !pending.length) {\n        bytes.push(resultingByte);\n        resultingByte = 0;\n        pendingBitsForResultingByte = 8;\n      }\n    }\n\n    // remove trailing zeroes\n    for (var i = bytes.length - 1; i > 0; i--) {\n      const value = bytes[i];\n      if (value === 0) {\n        bytes.pop();\n      } else {\n        break;\n      }\n    }\n    return bytes;\n  }\n  compactArray() {\n    this._sortData();\n    return this._data.map(valueOnly);\n  }\n};\nfunction popCountReduce(count, byte) {\n  return count + popCount(byte);\n}\nfunction popCount(_v) {\n  let v = _v;\n  v = v - (v >> 1 & 0x55555555); // reuse input as temporary\n  v = (v & 0x33333333) + (v >> 2 & 0x33333333); // temp\n  return (v + (v >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;\n}\nfunction sortInternal(a, b) {\n  return a[0] - b[0];\n}\nfunction valueOnly(elem) {\n  return elem[1];\n}","map":{"version":3,"names":["BITS_PER_BYTE","module","exports","SparseArray","constructor","_bitArrays","_data","_length","_changedLength","_changedData","set","index","value","pos","_internalPositionFor","undefined","_unsetInternalPos","_unsetBit","needsSort","length","_setBit","_setInternalPos","unset","get","_sortData","push","last","forEach","iterator","i","map","mapped","Array","reduce","reducer","initialValue","acc","find","finder","found","noCreate","bytePos","_bytePosFor","byte","bitPos","exists","previousPopCount","slice","popCountReduce","mask","bytePopCount","popCount","arrayPos","Math","floor","targetLength","data","elem","unshift","randomIndex","round","concat","splice","sort","sortInternal","bitField","bytes","pendingBitsForResultingByte","pendingBitsForNewByte","resultingByte","newByte","pending","shift","usingBits","min","masked","pop","compactArray","valueOnly","count","_v","v","a","b"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/sparse-array/index.js"],"sourcesContent":["'use strict'\n\n// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\nconst BITS_PER_BYTE = 7\n\nmodule.exports = class SparseArray {\n  constructor () {\n    this._bitArrays = []\n    this._data = []\n    this._length = 0\n    this._changedLength = false\n    this._changedData = false\n  }\n\n  set (index, value) {\n    let pos = this._internalPositionFor(index, false)\n    if (value === undefined) {\n      // unsetting\n      if (pos !== -1) {\n        // remove item from bit array and array itself\n        this._unsetInternalPos(pos)\n        this._unsetBit(index)\n        this._changedLength = true\n        this._changedData = true\n      }\n    } else {\n      let needsSort = false\n      if (pos === -1) {\n        pos = this._data.length\n        this._setBit(index)\n        this._changedData = true\n      } else {\n        needsSort = true\n      }\n      this._setInternalPos(pos, index, value, needsSort)\n      this._changedLength = true\n    }\n  }\n\n  unset (index) {\n    this.set(index, undefined)\n  }\n\n  get (index) {\n    this._sortData()\n    const pos = this._internalPositionFor(index, true)\n    if (pos === -1) {\n      return undefined\n    }\n    return this._data[pos][1]\n  }\n\n  push (value) {\n    this.set(this.length, value)\n    return this.length\n  }\n\n  get length () {\n    this._sortData()\n    if (this._changedLength) {\n      const last = this._data[this._data.length - 1]\n      this._length = last ? last[0] + 1 : 0\n      this._changedLength = false\n    }\n    return this._length\n  }\n\n  forEach (iterator) {\n    let i = 0\n    while(i < this.length) {\n      iterator(this.get(i), i, this)\n      i++\n    }\n  }\n\n  map (iterator) {\n    let i = 0\n    let mapped = new Array(this.length)\n    while(i < this.length) {\n      mapped[i] = iterator(this.get(i), i, this)\n      i++\n    }\n    return mapped\n  }\n\n  reduce (reducer, initialValue) {\n    let i = 0\n    let acc = initialValue\n    while(i < this.length) {\n      const value = this.get(i)\n      acc = reducer(acc, value, i)\n      i++\n    }\n    return acc\n  }\n\n  find (finder) {\n    let i = 0, found, last\n    while ((i < this.length) && !found) {\n      last = this.get(i)\n      found = finder(last)\n      i++\n    }\n    return found ? last : undefined\n  }\n\n  _internalPositionFor (index, noCreate) {\n    const bytePos = this._bytePosFor(index, noCreate)\n    if (bytePos >= this._bitArrays.length) {\n      return -1\n    }\n    const byte = this._bitArrays[bytePos]\n    const bitPos = index - bytePos * BITS_PER_BYTE\n    const exists = (byte & (1 << bitPos)) > 0\n    if (!exists) {\n      return -1\n    }\n    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0)\n\n    const mask = ~(0xffffffff << (bitPos + 1))\n    const bytePopCount = popCount(byte & mask)\n    const arrayPos = previousPopCount + bytePopCount - 1\n    return arrayPos\n  }\n\n  _bytePosFor (index, noCreate) {\n    const bytePos = Math.floor(index / BITS_PER_BYTE)\n    const targetLength = bytePos + 1\n    while (!noCreate && this._bitArrays.length < targetLength) {\n      this._bitArrays.push(0)\n    }\n    return bytePos\n  }\n\n  _setBit (index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] |= (1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _unsetBit(index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] &= ~(1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _setInternalPos(pos, index, value, needsSort) {\n    const data =this._data\n    const elem = [index, value]\n    if (needsSort) {\n      this._sortData()\n      data[pos] = elem\n    } else {\n      // new element. just shove it into the array\n      // but be nice about where we shove it\n      // in order to make sorting it later easier\n      if (data.length) {\n        if (data[data.length - 1][0] >= index) {\n          data.push(elem)\n        } else if (data[0][0] <= index) {\n          data.unshift(elem)\n        } else {\n          const randomIndex = Math.round(data.length / 2)\n          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex))\n        }\n      } else {\n        this._data.push(elem)\n      }\n      this._changedData = true\n      this._changedLength = true\n    }\n  }\n\n  _unsetInternalPos (pos) {\n    this._data.splice(pos, 1)\n  }\n\n  _sortData () {\n    if (this._changedData) {\n      this._data.sort(sortInternal)\n    }\n\n    this._changedData = false\n  }\n\n  bitField () {\n    const bytes = []\n    let pendingBitsForResultingByte = 8\n    let pendingBitsForNewByte = 0\n    let resultingByte = 0\n    let newByte\n    const pending = this._bitArrays.slice()\n    while (pending.length || pendingBitsForNewByte) {\n      if (pendingBitsForNewByte === 0) {\n        newByte = pending.shift()\n        pendingBitsForNewByte = 7\n      }\n\n      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte)\n      const mask = ~(0b11111111 << usingBits)\n      const masked = newByte & mask\n      resultingByte |= masked << (8 - pendingBitsForResultingByte)\n      newByte = newByte >>> usingBits\n      pendingBitsForNewByte -= usingBits\n      pendingBitsForResultingByte -= usingBits\n\n      if (!pendingBitsForResultingByte || (!pendingBitsForNewByte && !pending.length)) {\n        bytes.push(resultingByte)\n        resultingByte = 0\n        pendingBitsForResultingByte = 8\n      }\n    }\n\n    // remove trailing zeroes\n    for(var i = bytes.length - 1; i > 0; i--) {\n      const value = bytes[i]\n      if (value === 0) {\n        bytes.pop()\n      } else {\n        break\n      }\n    }\n\n    return bytes\n  }\n\n  compactArray () {\n    this._sortData()\n    return this._data.map(valueOnly)\n  }\n}\n\nfunction popCountReduce (count, byte) {\n  return count + popCount(byte)\n}\n\nfunction popCount(_v) {\n  let v = _v\n  v = v - ((v >> 1) & 0x55555555)                    // reuse input as temporary\n  v = (v & 0x33333333) + ((v >> 2) & 0x33333333)     // temp\n  return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nfunction sortInternal (a, b) {\n  return a[0] - b[0]\n}\n\nfunction valueOnly (elem) {\n  return elem[1]\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}