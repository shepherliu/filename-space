{"ast":null,"code":"'use strict';\n\nconst batch = require('it-batch');\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function* parallelBatch(source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n    /**\n     * @param {() => Promise<T>} p\n     */\n    p => {\n      return p().then(value => ({\n        ok: true,\n        value\n      }), err => ({\n        ok: false,\n        err\n      }));\n    });\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i];\n      if (result.ok) {\n        yield result.value;\n      } else {\n        throw result.err;\n      }\n    }\n  }\n}\nmodule.exports = parallelBatch;","map":{"version":3,"names":["batch","require","parallelBatch","source","size","tasks","things","map","p","then","value","ok","err","i","length","result","module","exports"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/it-parallel-batch/index.js"],"sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n      /**\n       * @param {() => Promise<T>} p\n       */\n      p => {\n        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n      })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAiBC,aAAa,CAAEC,MAAM,EAAEC,IAAI,GAAG,CAAC,EAAE;EAChD,WAAW,MAAMC,KAAK,IAAIL,KAAK,CAACG,MAAM,EAAEC,IAAI,CAAC,EAAE;IAC7C;IACA,MAAME,MAAM,GAAGD,KAAK,CAACE,GAAG;IACtB;AACN;AACA;IACMC,CAAC,IAAI;MACH,OAAOA,CAAC,EAAE,CAACC,IAAI,CAACC,KAAK,KAAK;QAAEC,EAAE,EAAE,IAAI;QAAED;MAAM,CAAC,CAAC,EAAEE,GAAG,KAAK;QAAED,EAAE,EAAE,KAAK;QAAEC;MAAI,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC;IAEJ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,MAAM,GAAG,MAAMT,MAAM,CAACO,CAAC,CAAC;MAE9B,IAAIE,MAAM,CAACJ,EAAE,EAAE;QACb,MAAMI,MAAM,CAACL,KAAK;MACpB,CAAC,MAAM;QACL,MAAMK,MAAM,CAACH,GAAG;MAClB;IACF;EACF;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGf,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}