{"ast":null,"code":"import { isCloudflareWorkers } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { decode as base64url } from './base64url.js';\nfunction subtleMapping(jwk) {\n  let algorithm;\n  let keyUsages;\n  switch (jwk.kty) {\n    case 'oct':\n      {\n        switch (jwk.alg) {\n          case 'HS256':\n          case 'HS384':\n          case 'HS512':\n            algorithm = {\n              name: 'HMAC',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n          case 'A128CBC-HS256':\n          case 'A192CBC-HS384':\n          case 'A256CBC-HS512':\n            throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);\n          case 'A128GCM':\n          case 'A192GCM':\n          case 'A256GCM':\n          case 'A128GCMKW':\n          case 'A192GCMKW':\n          case 'A256GCMKW':\n            algorithm = {\n              name: 'AES-GCM'\n            };\n            keyUsages = ['encrypt', 'decrypt'];\n            break;\n          case 'A128KW':\n          case 'A192KW':\n          case 'A256KW':\n            algorithm = {\n              name: 'AES-KW'\n            };\n            keyUsages = ['wrapKey', 'unwrapKey'];\n            break;\n          case 'PBES2-HS256+A128KW':\n          case 'PBES2-HS384+A192KW':\n          case 'PBES2-HS512+A256KW':\n            algorithm = {\n              name: 'PBKDF2'\n            };\n            keyUsages = ['deriveBits'];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    case 'RSA':\n      {\n        switch (jwk.alg) {\n          case 'PS256':\n          case 'PS384':\n          case 'PS512':\n            algorithm = {\n              name: 'RSA-PSS',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'RS256':\n          case 'RS384':\n          case 'RS512':\n            algorithm = {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'RSA-OAEP':\n          case 'RSA-OAEP-256':\n          case 'RSA-OAEP-384':\n          case 'RSA-OAEP-512':\n            algorithm = {\n              name: 'RSA-OAEP',\n              hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`\n            };\n            keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    case 'EC':\n      {\n        switch (jwk.alg) {\n          case 'ES256':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-256'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ES384':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-384'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ES512':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-521'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ECDH-ES':\n          case 'ECDH-ES+A128KW':\n          case 'ECDH-ES+A192KW':\n          case 'ECDH-ES+A256KW':\n            algorithm = {\n              name: 'ECDH',\n              namedCurve: jwk.crv\n            };\n            keyUsages = jwk.d ? ['deriveBits'] : [];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    case isCloudflareWorkers() && 'OKP':\n      if (jwk.alg !== 'EdDSA') {\n        throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n      }\n      switch (jwk.crv) {\n        case 'Ed25519':\n          algorithm = {\n            name: 'NODE-ED25519',\n            namedCurve: 'NODE-ED25519'\n          };\n          keyUsages = jwk.d ? ['sign'] : ['verify'];\n          break;\n        default:\n          throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n      }\n      break;\n    case 'OKP':\n      {\n        switch (jwk.alg) {\n          case 'EdDSA':\n            algorithm = {\n              name: jwk.crv\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ECDH-ES':\n          case 'ECDH-ES+A128KW':\n          case 'ECDH-ES+A192KW':\n          case 'ECDH-ES+A256KW':\n            algorithm = {\n              name: jwk.crv\n            };\n            keyUsages = jwk.d ? ['deriveBits'] : [];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n  }\n  return {\n    algorithm,\n    keyUsages\n  };\n}\nconst parse = async jwk => {\n  var _a, _b;\n  const {\n    algorithm,\n    keyUsages\n  } = subtleMapping(jwk);\n  const rest = [algorithm, (_a = jwk.ext) !== null && _a !== void 0 ? _a : false, (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages];\n  if (algorithm.name === 'PBKDF2') {\n    return crypto.subtle.importKey('raw', base64url(jwk.k), ...rest);\n  }\n  const keyData = {\n    ...jwk\n  };\n  delete keyData.alg;\n  delete keyData.use;\n  return crypto.subtle.importKey('jwk', keyData, ...rest);\n};\nexport default parse;","map":{"version":3,"names":["isCloudflareWorkers","crypto","JOSENotSupported","decode","base64url","subtleMapping","jwk","algorithm","keyUsages","kty","alg","name","hash","slice","d","parseInt","namedCurve","crv","parse","_a","_b","rest","ext","key_ops","subtle","importKey","k","keyData","use"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/jose/dist/browser/runtime/jwk_to_key.js"],"sourcesContent":["import { isCloudflareWorkers } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { decode as base64url } from './base64url.js';\nfunction subtleMapping(jwk) {\n    let algorithm;\n    let keyUsages;\n    switch (jwk.kty) {\n        case 'oct': {\n            switch (jwk.alg) {\n                case 'HS256':\n                case 'HS384':\n                case 'HS512':\n                    algorithm = { name: 'HMAC', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                case 'A128CBC-HS256':\n                case 'A192CBC-HS384':\n                case 'A256CBC-HS512':\n                    throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);\n                case 'A128GCM':\n                case 'A192GCM':\n                case 'A256GCM':\n                case 'A128GCMKW':\n                case 'A192GCMKW':\n                case 'A256GCMKW':\n                    algorithm = { name: 'AES-GCM' };\n                    keyUsages = ['encrypt', 'decrypt'];\n                    break;\n                case 'A128KW':\n                case 'A192KW':\n                case 'A256KW':\n                    algorithm = { name: 'AES-KW' };\n                    keyUsages = ['wrapKey', 'unwrapKey'];\n                    break;\n                case 'PBES2-HS256+A128KW':\n                case 'PBES2-HS384+A192KW':\n                case 'PBES2-HS512+A256KW':\n                    algorithm = { name: 'PBKDF2' };\n                    keyUsages = ['deriveBits'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'RSA': {\n            switch (jwk.alg) {\n                case 'PS256':\n                case 'PS384':\n                case 'PS512':\n                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RS256':\n                case 'RS384':\n                case 'RS512':\n                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RSA-OAEP':\n                case 'RSA-OAEP-256':\n                case 'RSA-OAEP-384':\n                case 'RSA-OAEP-512':\n                    algorithm = {\n                        name: 'RSA-OAEP',\n                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,\n                    };\n                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'EC': {\n            switch (jwk.alg) {\n                case 'ES256':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES384':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES512':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case isCloudflareWorkers() && 'OKP':\n            if (jwk.alg !== 'EdDSA') {\n                throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            switch (jwk.crv) {\n                case 'Ed25519':\n                    algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        case 'OKP': {\n            switch (jwk.alg) {\n                case 'EdDSA':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n    }\n    return { algorithm, keyUsages };\n}\nconst parse = async (jwk) => {\n    var _a, _b;\n    const { algorithm, keyUsages } = subtleMapping(jwk);\n    const rest = [\n        algorithm,\n        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,\n        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages,\n    ];\n    if (algorithm.name === 'PBKDF2') {\n        return crypto.subtle.importKey('raw', base64url(jwk.k), ...rest);\n    }\n    const keyData = { ...jwk };\n    delete keyData.alg;\n    delete keyData.use;\n    return crypto.subtle.importKey('jwk', keyData, ...rest);\n};\nexport default parse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}