{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done) {\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({\n        content: value\n      }, normaliseContent));\n      return;\n    }\n    if (isBytes(value)) {\n      yield toFileObject({\n        content: peekable\n      }, normaliseContent);\n      return;\n    }\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}","map":{"version":3,"names":["errCode","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-multiple.js"],"sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({ content: value }, normaliseContent));\n      return;\n    }\n    if (isBytes(value)) {\n      yield toFileObject({ content: peekable }, normaliseContent);\n      return;\n    }\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}