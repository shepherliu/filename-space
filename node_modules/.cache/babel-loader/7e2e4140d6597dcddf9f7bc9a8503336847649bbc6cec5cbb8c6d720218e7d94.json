{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","map":{"version":3,"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b","constructor"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/multiformats/esm/src/hashes/digest.js"],"sourcesContent":["import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}"],"mappings":";;AAAA,SACEA,MAAM,EACNC,MAAM,IAAIC,UAAU,QACf,aAAa;AACpB,OAAO,KAAKC,MAAM,MAAM,cAAc;AACtC,OAAO,MAAMC,MAAM,GAAG,CAACC,IAAI,EAAEC,MAAM,KAAK;EACtC,MAAMC,IAAI,GAAGD,MAAM,CAACE,UAAU;EAC9B,MAAMC,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACL,IAAI,CAAC;EAC9C,MAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACH,IAAI,CAAC;EAC7D,MAAMK,KAAK,GAAG,IAAIC,UAAU,CAACF,YAAY,GAAGJ,IAAI,CAAC;EACjDJ,MAAM,CAACW,QAAQ,CAACT,IAAI,EAAEO,KAAK,EAAE,CAAC,CAAC;EAC/BT,MAAM,CAACW,QAAQ,CAACP,IAAI,EAAEK,KAAK,EAAEH,UAAU,CAAC;EACxCG,KAAK,CAACG,GAAG,CAACT,MAAM,EAAEK,YAAY,CAAC;EAC/B,OAAO,IAAIK,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C,CAAC;AACD,OAAO,MAAMK,MAAM,GAAGC,SAAS,IAAI;EACjC,MAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAS,CAAC;EAC/B,MAAM,CAACb,IAAI,EAAEI,UAAU,CAAC,GAAGN,MAAM,CAACc,MAAM,CAACL,KAAK,CAAC;EAC/C,MAAM,CAACL,IAAI,EAAEI,YAAY,CAAC,GAAGR,MAAM,CAACc,MAAM,CAACL,KAAK,CAACO,QAAQ,CAACV,UAAU,CAAC,CAAC;EACtE,MAAMH,MAAM,GAAGM,KAAK,CAACO,QAAQ,CAACV,UAAU,GAAGE,YAAY,CAAC;EACxD,IAAIL,MAAM,CAACE,UAAU,KAAKD,IAAI,EAAE;IAC9B,MAAM,IAAIa,KAAK,CAAC,kBAAkB,CAAC;EACrC;EACA,OAAO,IAAIJ,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C,CAAC;AACD,OAAO,MAAMX,MAAM,GAAG,CAACoB,CAAC,EAAEC,CAAC,KAAK;EAC9B,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAOD,CAAC,CAAChB,IAAI,KAAKiB,CAAC,CAACjB,IAAI,IAAIgB,CAAC,CAACd,IAAI,KAAKe,CAAC,CAACf,IAAI,IAAIL,UAAU,CAACmB,CAAC,CAACT,KAAK,EAAEU,CAAC,CAACV,KAAK,CAAC;EAC/E;AACF,CAAC;AACD,OAAO,MAAMI,MAAM,CAAC;EAClBO,WAAW,CAAClB,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,EAAE;IACrC,IAAI,CAACP,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACM,KAAK,GAAGA,KAAK;EACpB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}