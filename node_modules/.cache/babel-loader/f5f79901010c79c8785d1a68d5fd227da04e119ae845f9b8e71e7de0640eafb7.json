{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport dirBuilder from './dir.js';\nimport fileBuilder from './file/index.js';\nimport errCode from 'err-code';\nimport rabin from '../chunker/rabin.js';\nimport fixedSize from '../chunker/fixed-size.js';\nimport validateChunks from './validate-chunks.js';\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\nfunction contentAsAsyncIterable(content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return async function* () {\n        yield content;\n      }();\n    } else if (isIterable(content)) {\n      return async function* () {\n        yield* content;\n      }();\n    } else if (isAsyncIterable(content)) {\n      return content;\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n  }\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n}\nasync function* dagBuilder(source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n    if (entry.content) {\n      let chunker;\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker;\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin;\n      } else {\n        chunker = fixedSize;\n      }\n      let chunkValidator;\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator;\n      } else {\n        chunkValidator = validateChunks;\n      }\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      };\n      yield () => fileBuilder(file, blockstore, options);\n    } else if (entry.path) {\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      };\n      yield () => dirBuilder(dir, blockstore, options);\n    } else {\n      throw new Error('Import candidate must have content or path or both');\n    }\n  }\n}\nexport default dagBuilder;","map":{"version":3,"names":["dirBuilder","fileBuilder","errCode","rabin","fixedSize","validateChunks","isIterable","thing","Symbol","iterator","isAsyncIterable","asyncIterator","contentAsAsyncIterable","content","Uint8Array","Error","dagBuilder","source","blockstore","options","entry","path","substring","wrapWithDirectory","split","filter","join","chunker","chunkValidator","file","mtime","mode","dir"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/index.js"],"sourcesContent":["import dirBuilder from './dir.js';\nimport fileBuilder from './file/index.js';\nimport errCode from 'err-code';\nimport rabin from '../chunker/rabin.js';\nimport fixedSize from '../chunker/fixed-size.js';\nimport validateChunks from './validate-chunks.js';\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\nfunction contentAsAsyncIterable(content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return async function* () {\n        yield content;\n      }();\n    } else if (isIterable(content)) {\n      return async function* () {\n        yield* content;\n      }();\n    } else if (isAsyncIterable(content)) {\n      return content;\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n  }\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n}\nasync function* dagBuilder(source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n    if (entry.content) {\n      let chunker;\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker;\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin;\n      } else {\n        chunker = fixedSize;\n      }\n      let chunkValidator;\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator;\n      } else {\n        chunkValidator = validateChunks;\n      }\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      };\n      yield () => fileBuilder(file, blockstore, options);\n    } else if (entry.path) {\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      };\n      yield () => dirBuilder(dir, blockstore, options);\n    } else {\n      throw new Error('Import candidate must have content or path or both');\n    }\n  }\n}\nexport default dagBuilder;"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,UAAU;AACjC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,cAAc,MAAM,sBAAsB;AACjD,SAASC,UAAU,CAACC,KAAK,EAAE;EACzB,OAAOC,MAAM,CAACC,QAAQ,IAAIF,KAAK;AACjC;AACA,SAASG,eAAe,CAACH,KAAK,EAAE;EAC9B,OAAOC,MAAM,CAACG,aAAa,IAAIJ,KAAK;AACtC;AACA,SAASK,sBAAsB,CAACC,OAAO,EAAE;EACvC,IAAI;IACF,IAAIA,OAAO,YAAYC,UAAU,EAAE;MACjC,OAAO,mBAAmB;QACxB,MAAMD,OAAO;MACf,CAAC,EAAE;IACL,CAAC,MAAM,IAAIP,UAAU,CAACO,OAAO,CAAC,EAAE;MAC9B,OAAO,mBAAmB;QACxB,OAAOA,OAAO;MAChB,CAAC,EAAE;IACL,CAAC,MAAM,IAAIH,eAAe,CAACG,OAAO,CAAC,EAAE;MACnC,OAAOA,OAAO;IAChB;EACF,CAAC,CAAC,MAAM;IACN,MAAMX,OAAO,CAAC,IAAIa,KAAK,CAAC,qBAAqB,CAAC,EAAE,qBAAqB,CAAC;EACxE;EACA,MAAMb,OAAO,CAAC,IAAIa,KAAK,CAAC,qBAAqB,CAAC,EAAE,qBAAqB,CAAC;AACxE;AACA,gBAAgBC,UAAU,CAACC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACtD,WAAW,MAAMC,KAAK,IAAIH,MAAM,EAAE;IAChC,IAAIG,KAAK,CAACC,IAAI,EAAE;MACd,IAAID,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;QACvCH,OAAO,CAACI,iBAAiB,GAAG,IAAI;MAClC;MACAH,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACC,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACJ,IAAI,IAAIA,IAAI,IAAIA,IAAI,KAAK,GAAG,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;IACnF;IACA,IAAIN,KAAK,CAACP,OAAO,EAAE;MACjB,IAAIc,OAAO;MACX,IAAI,OAAOR,OAAO,CAACQ,OAAO,KAAK,UAAU,EAAE;QACzCA,OAAO,GAAGR,OAAO,CAACQ,OAAO;MAC3B,CAAC,MAAM,IAAIR,OAAO,CAACQ,OAAO,KAAK,OAAO,EAAE;QACtCA,OAAO,GAAGxB,KAAK;MACjB,CAAC,MAAM;QACLwB,OAAO,GAAGvB,SAAS;MACrB;MACA,IAAIwB,cAAc;MAClB,IAAI,OAAOT,OAAO,CAACS,cAAc,KAAK,UAAU,EAAE;QAChDA,cAAc,GAAGT,OAAO,CAACS,cAAc;MACzC,CAAC,MAAM;QACLA,cAAc,GAAGvB,cAAc;MACjC;MACA,MAAMwB,IAAI,GAAG;QACXR,IAAI,EAAED,KAAK,CAACC,IAAI;QAChBS,KAAK,EAAEV,KAAK,CAACU,KAAK;QAClBC,IAAI,EAAEX,KAAK,CAACW,IAAI;QAChBlB,OAAO,EAAEc,OAAO,CAACC,cAAc,CAAChB,sBAAsB,CAACQ,KAAK,CAACP,OAAO,CAAC,EAAEM,OAAO,CAAC,EAAEA,OAAO;MAC1F,CAAC;MACD,MAAM,MAAMlB,WAAW,CAAC4B,IAAI,EAAEX,UAAU,EAAEC,OAAO,CAAC;IACpD,CAAC,MAAM,IAAIC,KAAK,CAACC,IAAI,EAAE;MACrB,MAAMW,GAAG,GAAG;QACVX,IAAI,EAAED,KAAK,CAACC,IAAI;QAChBS,KAAK,EAAEV,KAAK,CAACU,KAAK;QAClBC,IAAI,EAAEX,KAAK,CAACW;MACd,CAAC;MACD,MAAM,MAAM/B,UAAU,CAACgC,GAAG,EAAEd,UAAU,EAAEC,OAAO,CAAC;IAClD,CAAC,MAAM;MACL,MAAM,IAAIJ,KAAK,CAAC,oDAAoD,CAAC;IACvE;EACF;AACF;AACA,eAAeC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}