{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst textDecoder = new TextDecoder();\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n    if (b < 128) {\n      break;\n    }\n  }\n  return [v, offset];\n}\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [bytes.subarray(offset, postOffset), postOffset];\n}\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [wire & 7, wire >> 3, index];\n}\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`);\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`);\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`);\n      }\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\nexport function decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`);\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      ;\n      [data, index] = decodeBytes(bytes, index);\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  const node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}","map":{"version":3,"names":["textDecoder","TextDecoder","decodeVarint","bytes","offset","v","shift","Error","length","b","decodeBytes","byteLen","postOffset","subarray","decodeKey","index","wire","decodeLink","link","l","wireType","fieldNum","Hash","Name","undefined","Tsize","byts","decode","decodeNode","links","linksBeforeData","data","push","node","Data","Links"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/@ipld/dag-pb/esm/src/pb-decode.js"],"sourcesContent":["const textDecoder = new TextDecoder();\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n    if (b < 128) {\n      break;\n    }\n  }\n  return [\n    v,\n    offset\n  ];\n}\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [\n    bytes.subarray(offset, postOffset),\n    postOffset\n  ];\n}\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [\n    wire & 7,\n    wire >> 3,\n    index\n  ];\n}\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);\n      }\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\nexport function decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      ;\n      [data, index] = decodeBytes(bytes, index);\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  const node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}