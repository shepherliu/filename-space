{"ast":null,"code":"'use strict';\n\nconst START_MASKS = [0b11111111, 0b11111110, 0b11111100, 0b11111000, 0b11110000, 0b11100000, 0b11000000, 0b10000000];\nconst STOP_MASKS = [0b00000001, 0b00000011, 0b00000111, 0b00001111, 0b00011111, 0b00111111, 0b01111111, 0b11111111];\nmodule.exports = class ConsumableBuffer {\n  /**\n   * @param {Uint8Array} value\n   */\n  constructor(value) {\n    this._value = value;\n    this._currentBytePos = value.length - 1;\n    this._currentBitPos = 7;\n  }\n  availableBits() {\n    return this._currentBitPos + 1 + this._currentBytePos * 8;\n  }\n  totalBits() {\n    return this._value.length * 8;\n  }\n\n  /**\n   * @param {number} bits\n   */\n  take(bits) {\n    let pendingBits = bits;\n    let result = 0;\n    while (pendingBits && this._haveBits()) {\n      const byte = this._value[this._currentBytePos];\n      const availableBits = this._currentBitPos + 1;\n      const taking = Math.min(availableBits, pendingBits);\n      const value = byteBitsToInt(byte, availableBits - taking, taking);\n      result = (result << taking) + value;\n      pendingBits -= taking;\n      this._currentBitPos -= taking;\n      if (this._currentBitPos < 0) {\n        this._currentBitPos = 7;\n        this._currentBytePos--;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake(bits) {\n    this._currentBitPos += bits;\n    while (this._currentBitPos > 7) {\n      this._currentBitPos -= 8;\n      this._currentBytePos += 1;\n    }\n  }\n  _haveBits() {\n    return this._currentBytePos >= 0;\n  }\n};\n\n/**\n * @param {number} byte\n * @param {number} start\n * @param {number} length\n */\nfunction byteBitsToInt(byte, start, length) {\n  const mask = maskFor(start, length);\n  return (byte & mask) >>> start;\n}\n\n/**\n * @param {number} start\n * @param {number} length\n */\nfunction maskFor(start, length) {\n  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)];\n}","map":{"version":3,"names":["START_MASKS","STOP_MASKS","module","exports","ConsumableBuffer","constructor","value","_value","_currentBytePos","length","_currentBitPos","availableBits","totalBits","take","bits","pendingBits","result","_haveBits","byte","taking","Math","min","byteBitsToInt","untake","start","mask","maskFor"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/hamt-sharding/src/consumable-buffer.js"],"sourcesContent":["'use strict'\n\nconst START_MASKS = [\n  0b11111111,\n  0b11111110,\n  0b11111100,\n  0b11111000,\n  0b11110000,\n  0b11100000,\n  0b11000000,\n  0b10000000\n]\n\nconst STOP_MASKS = [\n  0b00000001,\n  0b00000011,\n  0b00000111,\n  0b00001111,\n  0b00011111,\n  0b00111111,\n  0b01111111,\n  0b11111111\n]\n\nmodule.exports = class ConsumableBuffer {\n  /**\n   * @param {Uint8Array} value\n   */\n  constructor (value) {\n    this._value = value\n    this._currentBytePos = value.length - 1\n    this._currentBitPos = 7\n  }\n\n  availableBits () {\n    return this._currentBitPos + 1 + this._currentBytePos * 8\n  }\n\n  totalBits () {\n    return this._value.length * 8\n  }\n\n  /**\n   * @param {number} bits\n   */\n  take (bits) {\n    let pendingBits = bits\n    let result = 0\n    while (pendingBits && this._haveBits()) {\n      const byte = this._value[this._currentBytePos]\n      const availableBits = this._currentBitPos + 1\n      const taking = Math.min(availableBits, pendingBits)\n      const value = byteBitsToInt(byte, availableBits - taking, taking)\n      result = (result << taking) + value\n\n      pendingBits -= taking\n\n      this._currentBitPos -= taking\n      if (this._currentBitPos < 0) {\n        this._currentBitPos = 7\n        this._currentBytePos--\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake (bits) {\n    this._currentBitPos += bits\n    while (this._currentBitPos > 7) {\n      this._currentBitPos -= 8\n      this._currentBytePos += 1\n    }\n  }\n\n  _haveBits () {\n    return this._currentBytePos >= 0\n  }\n}\n\n/**\n * @param {number} byte\n * @param {number} start\n * @param {number} length\n */\nfunction byteBitsToInt (byte, start, length) {\n  const mask = maskFor(start, length)\n  return (byte & mask) >>> start\n}\n\n/**\n * @param {number} start\n * @param {number} length\n */\nfunction maskFor (start, length) {\n  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)]\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAG,CAClB,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,CACX;AAED,MAAMC,UAAU,GAAG,CACjB,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,CACX;AAEDC,MAAM,CAACC,OAAO,GAAG,MAAMC,gBAAgB,CAAC;EACtC;AACF;AACA;EACEC,WAAW,CAAEC,KAAK,EAAE;IAClB,IAAI,CAACC,MAAM,GAAGD,KAAK;IACnB,IAAI,CAACE,eAAe,GAAGF,KAAK,CAACG,MAAM,GAAG,CAAC;IACvC,IAAI,CAACC,cAAc,GAAG,CAAC;EACzB;EAEAC,aAAa,GAAI;IACf,OAAO,IAAI,CAACD,cAAc,GAAG,CAAC,GAAG,IAAI,CAACF,eAAe,GAAG,CAAC;EAC3D;EAEAI,SAAS,GAAI;IACX,OAAO,IAAI,CAACL,MAAM,CAACE,MAAM,GAAG,CAAC;EAC/B;;EAEA;AACF;AACA;EACEI,IAAI,CAAEC,IAAI,EAAE;IACV,IAAIC,WAAW,GAAGD,IAAI;IACtB,IAAIE,MAAM,GAAG,CAAC;IACd,OAAOD,WAAW,IAAI,IAAI,CAACE,SAAS,EAAE,EAAE;MACtC,MAAMC,IAAI,GAAG,IAAI,CAACX,MAAM,CAAC,IAAI,CAACC,eAAe,CAAC;MAC9C,MAAMG,aAAa,GAAG,IAAI,CAACD,cAAc,GAAG,CAAC;MAC7C,MAAMS,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACV,aAAa,EAAEI,WAAW,CAAC;MACnD,MAAMT,KAAK,GAAGgB,aAAa,CAACJ,IAAI,EAAEP,aAAa,GAAGQ,MAAM,EAAEA,MAAM,CAAC;MACjEH,MAAM,GAAG,CAACA,MAAM,IAAIG,MAAM,IAAIb,KAAK;MAEnCS,WAAW,IAAII,MAAM;MAErB,IAAI,CAACT,cAAc,IAAIS,MAAM;MAC7B,IAAI,IAAI,CAACT,cAAc,GAAG,CAAC,EAAE;QAC3B,IAAI,CAACA,cAAc,GAAG,CAAC;QACvB,IAAI,CAACF,eAAe,EAAE;MACxB;IACF;IAEA,OAAOQ,MAAM;EACf;;EAEA;AACF;AACA;EACEO,MAAM,CAAET,IAAI,EAAE;IACZ,IAAI,CAACJ,cAAc,IAAII,IAAI;IAC3B,OAAO,IAAI,CAACJ,cAAc,GAAG,CAAC,EAAE;MAC9B,IAAI,CAACA,cAAc,IAAI,CAAC;MACxB,IAAI,CAACF,eAAe,IAAI,CAAC;IAC3B;EACF;EAEAS,SAAS,GAAI;IACX,OAAO,IAAI,CAACT,eAAe,IAAI,CAAC;EAClC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASc,aAAa,CAAEJ,IAAI,EAAEM,KAAK,EAAEf,MAAM,EAAE;EAC3C,MAAMgB,IAAI,GAAGC,OAAO,CAACF,KAAK,EAAEf,MAAM,CAAC;EACnC,OAAO,CAACS,IAAI,GAAGO,IAAI,MAAMD,KAAK;AAChC;;AAEA;AACA;AACA;AACA;AACA,SAASE,OAAO,CAAEF,KAAK,EAAEf,MAAM,EAAE;EAC/B,OAAOT,WAAW,CAACwB,KAAK,CAAC,GAAGvB,UAAU,CAACmB,IAAI,CAACC,GAAG,CAACZ,MAAM,GAAGe,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACzE"},"metadata":{},"sourceType":"script","externalDependencies":[]}