{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nfunction base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array) ;else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${name} character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","map":{"version":3,"names":["base","ALPHABET","name","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","src","_brrp__multiformats_scope_baseX"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/multiformats/esm/vendor/base-x.js"],"sourcesContent":["function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}