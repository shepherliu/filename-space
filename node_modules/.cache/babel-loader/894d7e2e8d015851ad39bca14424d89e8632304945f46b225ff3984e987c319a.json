{"ast":null,"code":"import { defineComponent, ref, computed, reactive, onMounted, h } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElSelect } from '../../select/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport { useSelect } from './select.mjs';\nimport { useTree } from './tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTreeSelect\",\n  inheritAttrs: false,\n  props: {\n    ...ElSelect.props,\n    ..._Tree.props\n  },\n  setup(props, context) {\n    const {\n      slots,\n      expose\n    } = context;\n    const select = ref();\n    const tree = ref();\n    const key = computed(() => props.nodeKey || props.valueKey || \"value\");\n    const selectProps = useSelect(props, context, {\n      select,\n      tree,\n      key\n    });\n    const treeProps = useTree(props, context, {\n      select,\n      tree,\n      key\n    });\n    const methods = reactive({});\n    expose(methods);\n    onMounted(() => {\n      Object.assign(methods, {\n        ...pick(tree.value, [\"filter\", \"updateKeyChildren\", \"getCheckedNodes\", \"setCheckedNodes\", \"getCheckedKeys\", \"setCheckedKeys\", \"setChecked\", \"getHalfCheckedNodes\", \"getHalfCheckedKeys\", \"getCurrentKey\", \"getCurrentNode\", \"setCurrentKey\", \"setCurrentNode\", \"getNode\", \"remove\", \"append\", \"insertBefore\", \"insertAfter\"]),\n        ...pick(select.value, [\"focus\", \"blur\"])\n      });\n    });\n    return () => h(ElSelect, reactive({\n      ...selectProps,\n      ref: ref2 => select.value = ref2\n    }), {\n      ...slots,\n      default: () => h(_Tree, reactive({\n        ...treeProps,\n        ref: ref2 => tree.value = ref2\n      }))\n    });\n  }\n});\nvar TreeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-select/src/tree-select.vue\"]]);\nexport { TreeSelect as default };","map":{"version":3,"mappings":";;;;;;;AASA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM;EAENC,YAAc;EACdC,KAAO;IACL,GAAGC,QAAS;IACZ,GAAGC,KAAO;EAAA,CACZ;EACAC,MAAMH,OAAOI,OAAS;IACd;MAAEC;MAAOC;IAAW;IAE1B,MAAMC,SAASC,GAAmC;IAClD,MAAMC,OAAOD,GAAiC;IAE9C,MAAME,MAAMC,QAAS,OAAMX,MAAMY,OAAW,UAAMC,YAAY,OAAO;IAE/D,oBAAcC,UAAUd,KAAO,WAAS;MAAEO,MAAQ;MAAAE;MAAMC;IAAA,CAAK;IAC7D,kBAAYK,QAAQf,KAAO,WAAS;MAAEO,MAAQ;MAAAE;MAAMC;IAAA,CAAK;IAGzD,gBAAUM,QAAS,GAAE;IAC3BV,OAAOW,OAAO;IACdC,UAAU,MAAM;MACdC,OAAOC,OAAOH,OAAS;QACrB,GAAGI,IAAK,MAAKC,KAAO,GAClB,UACA,qBACA,mBACA,mBACA,kBACA,kBACA,cACA,uBACA,sBACA,iBACA,kBACA,iBACA,kBACA,WACA,UACA,UACA,gBACA,cACD;QACD,GAAGD,IAAK,QAAOC,OAAO,CAAC,SAAS,MAAM,CAAC;MAAA,CACxC;IAAA,CACF;IAEM,aACLC,CACE,WAQAP,QAAS;MACP,GAAGQ;MACHhB,GAAK,EAACiB,IAAS,WAAOH,KAAQ;IAAA,CAC/B,CACD;MACE,GAAGjB;MACHqB,OAAS,QACPH,CACE,QACAP,QAAS;QACP,GAAGW;QACHnB,GAAK,EAACiB,IAAS,SAAKH,KAAQ;MAAA,CAC7B,CACH;IAAA,CAEN;EAAA;AAEN,CAAC","names":["_sfc_main","defineComponent","name","inheritAttrs","props","ElSelect","ElTree","setup","context","slots","expose","select","ref","tree","key","computed","nodeKey","valueKey","useSelect","useTree","reactive","methods","onMounted","Object","assign","pick","value","h","selectProps","ref2","default","treeProps"],"sources":["../../../../../../packages/components/tree-select/src/tree-select.vue"],"sourcesContent":["<script lang=\"ts\">\n// @ts-nocheck\nimport { computed, defineComponent, h, onMounted, reactive, ref } from 'vue'\nimport { pick } from 'lodash-unified'\nimport ElSelect from '@element-plus/components/select'\nimport ElTree from '@element-plus/components/tree'\nimport { useSelect } from './select'\nimport { useTree } from './tree'\n\nexport default defineComponent({\n  name: 'ElTreeSelect',\n  // disable `ElSelect` inherit current attrs\n  inheritAttrs: false,\n  props: {\n    ...ElSelect.props,\n    ...ElTree.props,\n  },\n  setup(props, context) {\n    const { slots, expose } = context\n\n    const select = ref<InstanceType<typeof ElSelect>>()\n    const tree = ref<InstanceType<typeof ElTree>>()\n\n    const key = computed(() => props.nodeKey || props.valueKey || 'value')\n\n    const selectProps = useSelect(props, context, { select, tree, key })\n    const treeProps = useTree(props, context, { select, tree, key })\n\n    // expose ElTree/ElSelect methods\n    const methods = reactive({})\n    expose(methods)\n    onMounted(() => {\n      Object.assign(methods, {\n        ...pick(tree.value, [\n          'filter',\n          'updateKeyChildren',\n          'getCheckedNodes',\n          'setCheckedNodes',\n          'getCheckedKeys',\n          'setCheckedKeys',\n          'setChecked',\n          'getHalfCheckedNodes',\n          'getHalfCheckedKeys',\n          'getCurrentKey',\n          'getCurrentNode',\n          'setCurrentKey',\n          'setCurrentNode',\n          'getNode',\n          'remove',\n          'append',\n          'insertBefore',\n          'insertAfter',\n        ]),\n        ...pick(select.value, ['focus', 'blur']),\n      })\n    })\n\n    return () =>\n      h(\n        ElSelect,\n        /**\n         * 1. The `props` is processed into `Refs`, but `v-bind` and\n         * render function props cannot read `Refs`, so use `reactive`\n         * unwrap the `Refs` and keep reactive.\n         * 2. The keyword `ref` requires `Ref`, but `reactive` broke it,\n         * so use function.\n         */\n        reactive({\n          ...selectProps,\n          ref: (ref) => (select.value = ref),\n        }),\n        {\n          ...slots,\n          default: () =>\n            h(\n              ElTree,\n              reactive({\n                ...treeProps,\n                ref: (ref) => (tree.value = ref),\n              })\n            ),\n        }\n      )\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}