{"ast":null,"code":"import { CarWriter } from '@ipld/car';\nexport class TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length) throw new Error('missing CARs');\n  }\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {\n      writer,\n      out\n    } = CarWriter.create(roots);\n    const writeCar = async () => {\n      const written = new Set();\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString())) continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n      try {\n        await writeBlocks(reader);\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n    writeCar();\n    yield* out;\n  }\n}","map":{"version":3,"names":["CarWriter","TreewalkCarJoiner","constructor","cars","_cars","Array","from","length","Error","car","reader","roots","getRoots","writer","out","create","writeCar","written","Set","writeBlocks","b","blocks","has","cid","toString","put","add","slice","err","console","error","close"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/carbites/esm/lib/treewalk/joiner.js"],"sourcesContent":["import { CarWriter } from '@ipld/car';\nexport class TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length)\n      throw new Error('missing CARs');\n  }\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {writer, out} = CarWriter.create(roots);\n    const writeCar = async () => {\n      const written = new Set();\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString()))\n            continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n      try {\n        await writeBlocks(reader);\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n    writeCar();\n    yield* out;\n  }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,WAAW;AACrC,OAAO,MAAMC,iBAAiB,CAAC;EAC7BC,WAAW,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,IAAI,CAAC;IAC7B,IAAI,CAAC,IAAI,CAACC,KAAK,CAACG,MAAM,EACpB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACnC;EACA,OAAOC,GAAG,GAAG;IACX,MAAMC,MAAM,GAAG,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC;IAC5B,MAAMO,KAAK,GAAG,MAAMD,MAAM,CAACE,QAAQ,EAAE;IACrC,MAAM;MAACC,MAAM;MAAEC;IAAG,CAAC,GAAGd,SAAS,CAACe,MAAM,CAACJ,KAAK,CAAC;IAC7C,MAAMK,QAAQ,GAAG,YAAY;MAC3B,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAAE;MACzB,MAAMC,WAAW,GAAG,MAAMT,MAAM,IAAI;QAClC,WAAW,MAAMU,CAAC,IAAIV,MAAM,CAACW,MAAM,EAAE,EAAE;UACrC,IAAIJ,OAAO,CAACK,GAAG,CAACF,CAAC,CAACG,GAAG,CAACC,QAAQ,EAAE,CAAC,EAC/B;UACF,MAAMX,MAAM,CAACY,GAAG,CAACL,CAAC,CAAC;UACnBH,OAAO,CAACS,GAAG,CAACN,CAAC,CAACG,GAAG,CAACC,QAAQ,EAAE,CAAC;QAC/B;MACF,CAAC;MACD,IAAI;QACF,MAAML,WAAW,CAACT,MAAM,CAAC;QACzB,KAAK,MAAMA,MAAM,IAAI,IAAI,CAACN,KAAK,CAACuB,KAAK,CAAC,CAAC,CAAC,EAAE;UACxC,MAAMR,WAAW,CAACT,MAAM,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOkB,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACpB,CAAC,SAAS;QACR,MAAMf,MAAM,CAACkB,KAAK,EAAE;MACtB;IACF,CAAC;IACDf,QAAQ,EAAE;IACV,OAAOF,GAAG;EACZ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}