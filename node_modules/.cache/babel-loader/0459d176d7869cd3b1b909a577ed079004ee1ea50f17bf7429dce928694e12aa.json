{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb) return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;\n  if (o instanceof ArrayBuffer) return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty };","map":{"version":3,"names":["empty","Uint8Array","toHex","d","reduce","hex","byte","toString","padStart","fromHex","hexes","match","map","b","parseInt","equals","aa","bb","byteLength","ii","coerce","o","constructor","name","ArrayBuffer","isView","buffer","byteOffset","Error","isBinary","fromString","str","TextEncoder","encode","TextDecoder","decode"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/multiformats/esm/src/bytes.js"],"sourcesContent":["const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};"],"mappings":";;AAAA,MAAMA,KAAK,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;AAC/B,MAAMC,KAAK,GAAGC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;AACxF,MAAMC,OAAO,GAAGJ,GAAG,IAAI;EACrB,MAAMK,KAAK,GAAGL,GAAG,CAACM,KAAK,CAAC,KAAK,CAAC;EAC9B,OAAOD,KAAK,GAAG,IAAIT,UAAU,CAACS,KAAK,CAACE,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAGb,KAAK;AACxE,CAAC;AACD,MAAMe,MAAM,GAAG,CAACC,EAAE,EAAEC,EAAE,KAAK;EACzB,IAAID,EAAE,KAAKC,EAAE,EACX,OAAO,IAAI;EACb,IAAID,EAAE,CAACE,UAAU,KAAKD,EAAE,CAACC,UAAU,EAAE;IACnC,OAAO,KAAK;EACd;EACA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGH,EAAE,CAACE,UAAU,EAAEC,EAAE,EAAE,EAAE;IACzC,IAAIH,EAAE,CAACG,EAAE,CAAC,KAAKF,EAAE,CAACE,EAAE,CAAC,EAAE;MACrB,OAAO,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD,MAAMC,MAAM,GAAGC,CAAC,IAAI;EAClB,IAAIA,CAAC,YAAYpB,UAAU,IAAIoB,CAAC,CAACC,WAAW,CAACC,IAAI,KAAK,YAAY,EAChE,OAAOF,CAAC;EACV,IAAIA,CAAC,YAAYG,WAAW,EAC1B,OAAO,IAAIvB,UAAU,CAACoB,CAAC,CAAC;EAC1B,IAAIG,WAAW,CAACC,MAAM,CAACJ,CAAC,CAAC,EAAE;IACzB,OAAO,IAAIpB,UAAU,CAACoB,CAAC,CAACK,MAAM,EAAEL,CAAC,CAACM,UAAU,EAAEN,CAAC,CAACH,UAAU,CAAC;EAC7D;EACA,MAAM,IAAIU,KAAK,CAAC,mCAAmC,CAAC;AACtD,CAAC;AACD,MAAMC,QAAQ,GAAGR,CAAC,IAAIA,CAAC,YAAYG,WAAW,IAAIA,WAAW,CAACC,MAAM,CAACJ,CAAC,CAAC;AACvE,MAAMS,UAAU,GAAGC,GAAG,IAAI,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACF,GAAG,CAAC;AACvD,MAAMxB,QAAQ,GAAGM,CAAC,IAAI,IAAIqB,WAAW,EAAE,CAACC,MAAM,CAACtB,CAAC,CAAC;AACjD,SACEE,MAAM,EACNK,MAAM,EACNS,QAAQ,EACRpB,OAAO,EACPP,KAAK,EACL4B,UAAU,EACVvB,QAAQ,EACRP,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}