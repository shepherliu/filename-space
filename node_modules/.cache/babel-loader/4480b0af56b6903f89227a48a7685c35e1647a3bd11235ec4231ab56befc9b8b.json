{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport { asyncIterableReader, bytesReader, createDecoder } from './decoder.js';\nexport class CarIteratorBase {\n  constructor(version, roots, iterable) {\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n  get version() {\n    return this._version;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n}\nexport class CarBlockIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    return this._iterable[Symbol.asyncIterator]();\n  }\n  static async fromBytes(bytes) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromBytes(bytes);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromIterable(asyncIterable);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n}\nexport class CarCIDIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    const iterable = this._iterable[Symbol.asyncIterator]();\n    return {\n      async next() {\n        const next = await iterable.next();\n        if (next.done) {\n          return next;\n        }\n        return {\n          done: false,\n          value: next.value.cid\n        };\n      }\n    };\n  }\n  static async fromBytes(bytes) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromBytes(bytes);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromIterable(asyncIterable);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n}\nasync function fromBytes(bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array');\n  }\n  return decodeIterator(bytesReader(bytes));\n}\nasync function fromIterable(asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable');\n  }\n  return decodeIterator(asyncIterableReader(asyncIterable));\n}\nasync function decodeIterator(reader) {\n  const decoder = createDecoder(reader);\n  const {\n    version,\n    roots\n  } = await decoder.header();\n  return {\n    version,\n    roots,\n    iterator: decoder.blocks()\n  };\n}","map":{"version":3,"names":["asyncIterableReader","bytesReader","createDecoder","CarIteratorBase","constructor","version","roots","iterable","_version","_roots","_iterable","_decoded","getRoots","CarBlockIterator","Symbol","asyncIterator","Error","fromBytes","bytes","iterator","fromIterable","asyncIterable","CarCIDIterator","next","done","value","cid","Uint8Array","TypeError","decodeIterator","reader","decoder","header","blocks"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/@ipld/car/esm/lib/iterator.js"],"sourcesContent":["import {\n  asyncIterableReader,\n  bytesReader,\n  createDecoder\n} from './decoder.js';\nexport class CarIteratorBase {\n  constructor(version, roots, iterable) {\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n  get version() {\n    return this._version;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n}\nexport class CarBlockIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    return this._iterable[Symbol.asyncIterator]();\n  }\n  static async fromBytes(bytes) {\n    const {version, roots, iterator} = await fromBytes(bytes);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {version, roots, iterator} = await fromIterable(asyncIterable);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n}\nexport class CarCIDIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    const iterable = this._iterable[Symbol.asyncIterator]();\n    return {\n      async next() {\n        const next = await iterable.next();\n        if (next.done) {\n          return next;\n        }\n        return {\n          done: false,\n          value: next.value.cid\n        };\n      }\n    };\n  }\n  static async fromBytes(bytes) {\n    const {version, roots, iterator} = await fromBytes(bytes);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {version, roots, iterator} = await fromIterable(asyncIterable);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n}\nasync function fromBytes(bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array');\n  }\n  return decodeIterator(bytesReader(bytes));\n}\nasync function fromIterable(asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable');\n  }\n  return decodeIterator(asyncIterableReader(asyncIterable));\n}\nasync function decodeIterator(reader) {\n  const decoder = createDecoder(reader);\n  const {version, roots} = await decoder.header();\n  return {\n    version,\n    roots,\n    iterator: decoder.blocks()\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}