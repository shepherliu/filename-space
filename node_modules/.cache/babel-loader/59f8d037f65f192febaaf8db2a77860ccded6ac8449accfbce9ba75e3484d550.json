{"ast":null,"code":"import errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\nimport * as mh from 'multiformats/hashes/digest';\nconst rawContent = node => {\n  async function* contentGenerator(options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length);\n    yield extractDataFromBlock(node, 0, offset, offset + length);\n  }\n  return contentGenerator;\n};\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND');\n  }\n  const buf = await mh.decode(cid.multihash.bytes);\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  };\n};\nexport default resolve;","map":{"version":3,"names":["errCode","extractDataFromBlock","validateOffsetAndLength","mh","rawContent","node","contentGenerator","options","offset","length","resolve","cid","name","path","toResolve","depth","blockstore","Error","buf","decode","multihash","bytes","entry","type","content","digest","size"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/identity.js"],"sourcesContent":["import errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\nimport * as mh from 'multiformats/hashes/digest';\nconst rawContent = node => {\n  async function* contentGenerator(options = {}) {\n    const {offset, length} = validateOffsetAndLength(node.length, options.offset, options.length);\n    yield extractDataFromBlock(node, 0, offset, offset + length);\n  }\n  return contentGenerator;\n};\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${ path } found in raw node ${ cid }`), 'ERR_NOT_FOUND');\n  }\n  const buf = await mh.decode(cid.multihash.bytes);\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  };\n};\nexport default resolve;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,oBAAoB,MAAM,qCAAqC;AACtE,OAAOC,uBAAuB,MAAM,wCAAwC;AAC5E,OAAO,KAAKC,EAAE,MAAM,4BAA4B;AAChD,MAAMC,UAAU,GAAGC,IAAI,IAAI;EACzB,gBAAgBC,gBAAgB,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7C,MAAM;MAACC,MAAM;MAAEC;IAAM,CAAC,GAAGP,uBAAuB,CAACG,IAAI,CAACI,MAAM,EAAEF,OAAO,CAACC,MAAM,EAAED,OAAO,CAACE,MAAM,CAAC;IAC7F,MAAMR,oBAAoB,CAACI,IAAI,EAAE,CAAC,EAAEG,MAAM,EAAEA,MAAM,GAAGC,MAAM,CAAC;EAC9D;EACA,OAAOH,gBAAgB;AACzB,CAAC;AACD,MAAMI,OAAO,GAAG,OAAOC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEJ,OAAO,EAAEK,KAAK,EAAEC,UAAU,EAAET,OAAO,KAAK;EACzF,IAAIO,SAAS,CAACL,MAAM,EAAE;IACpB,MAAMT,OAAO,CAAC,IAAIiB,KAAK,CAAE,iBAAiBJ,IAAM,sBAAsBF,GAAK,EAAC,CAAC,EAAE,eAAe,CAAC;EACjG;EACA,MAAMO,GAAG,GAAG,MAAMf,EAAE,CAACgB,MAAM,CAACR,GAAG,CAACS,SAAS,CAACC,KAAK,CAAC;EAChD,OAAO;IACLC,KAAK,EAAE;MACLC,IAAI,EAAE,UAAU;MAChBX,IAAI;MACJC,IAAI;MACJF,GAAG;MACHa,OAAO,EAAEpB,UAAU,CAACc,GAAG,CAACO,MAAM,CAAC;MAC/BV,KAAK;MACLW,IAAI,EAAER,GAAG,CAACO,MAAM,CAAChB,MAAM;MACvBJ,IAAI,EAAEa,GAAG,CAACO;IACZ;EACF,CAAC;AACH,CAAC;AACD,eAAef,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}