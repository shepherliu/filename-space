{"ast":null,"code":"import { inject, ref, computed, toRaw } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport { checkboxGroupContextKey } from '../../../../tokens/checkbox.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { isArray } from '@vue/shared';\nimport { useSize } from '../../../../hooks/use-common-props/index.mjs';\nconst useCheckboxStatus = (props, slots, {\n  model\n}) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  const isFocused = ref(false);\n  const isChecked = computed(() => {\n    const value = model.value;\n    if (isBoolean(value)) {\n      return value;\n    } else if (isArray(value)) {\n      return value.map(toRaw).includes(props.label);\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxButtonSize = useSize(computed(() => {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }), {\n    prop: true\n  });\n  const checkboxSize = useSize(computed(() => {\n    var _a;\n    return (_a = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a.value;\n  }));\n  const hasOwnLabel = computed(() => {\n    return !!(slots.default || props.label);\n  });\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel\n  };\n};\nexport { useCheckboxStatus };","map":{"version":3,"mappings":";;;;;;;;AAIY,MAACA,iBAAiB,GAAG,CAACC,KAAK,EAAEC,KAAK,EAAE;EAAEC;AAAK,CAAE,KAAK;EAC5D,MAAMC,aAAa,GAAGC,MAAM,CAACC,uBAAuB,EAAE,KAAK,CAAC,CAAC;EAC7D,MAAMC,SAAS,GAAGC,GAAG,CAAC,KAAK,CAAC;EAC5B,MAAMC,SAAS,GAAGC,QAAQ,CAAC,MAAM;IAC/B,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAAK;IACzB,IAAIC,SAAS,CAACD,KAAK,CAAC,EAAE;MACpB,OAAOA,KAAK;IAClB,CAAK,MAAM,IAAIE,OAAO,CAACF,KAAK,CAAC,EAAE;MACzB,OAAOA,KAAK,CAACG,GAAG,CAACC,KAAK,CAAC,CAACC,QAAQ,CAACf,KAAK,CAACgB,KAAK,CAAC;IACnD,CAAK,MAAM,IAAIN,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MAC7C,OAAOA,KAAK,KAAKV,KAAK,CAACiB,SAAS;IACtC,CAAK,MAAM;MACL,OAAO,CAAC,CAACP,KAAK;IACpB;EACA,CAAG,CAAC;EACF,MAAMQ,kBAAkB,GAAGC,OAAO,CAACV,QAAQ,CAAC,MAAM;IAChD,IAAIW,EAAE;IACN,OAAO,CAACA,EAAE,GAAGjB,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACkB,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAACV,KAAK;EACjG,CAAG,CAAC,EAAE;IACFY,IAAI,EAAE;EACV,CAAG,CAAC;EACF,MAAMC,YAAY,GAAGJ,OAAO,CAACV,QAAQ,CAAC,MAAM;IAC1C,IAAIW,EAAE;IACN,OAAO,CAACA,EAAE,GAAGjB,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACkB,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAACV,KAAK;EACjG,CAAG,CAAC,CAAC;EACH,MAAMc,WAAW,GAAGf,QAAQ,CAAC,MAAM;IACjC,OAAO,CAAC,EAAER,KAAK,CAACwB,OAAO,IAAIzB,KAAK,CAACgB,KAAK,CAAC;EAC3C,CAAG,CAAC;EACF,OAAO;IACLE,kBAAkB;IAClBV,SAAS;IACTF,SAAS;IACTiB,YAAY;IACZC;EACJ,CAAG;AACH","names":["useCheckboxStatus","props","slots","model","checkboxGroup","inject","checkboxGroupContextKey","isFocused","ref","isChecked","computed","value","isBoolean","isArray","map","toRaw","includes","label","trueLabel","checkboxButtonSize","useSize","_a","size","prop","checkboxSize","hasOwnLabel","default"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox-status.ts"],"sourcesContent":["import { computed, inject, ref, toRaw } from 'vue'\nimport { useSize } from '@element-plus/hooks'\nimport { isArray, isBoolean } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '@element-plus/tokens'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nexport const useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isFocused = ref(false)\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (isBoolean(value)) {\n      return value\n    } else if (isArray(value)) {\n      return value.map(toRaw).includes(props.label)\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxButtonSize = useSize(\n    computed(() => checkboxGroup?.size?.value),\n    {\n      prop: true,\n    }\n  )\n  const checkboxSize = useSize(computed(() => checkboxGroup?.size?.value))\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!(slots.default || props.label)\n  })\n\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel,\n  }\n}\n\nexport type CheckboxStatus = ReturnType<typeof useCheckboxStatus>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}