{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport { CID } from 'multiformats/cid';\nconst pbNodeProperties = ['Data', 'Links'];\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize'];\nconst textEncoder = new TextEncoder();\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n  return x < y ? -1 : y < x ? 1 : 0;\n}\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link);\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n    return {\n      Hash\n    };\n  }\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbl = {};\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash);\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`);\n    }\n    if (cid) {\n      pbl.Hash = cid;\n    }\n  }\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n  return pbl;\n}\nexport function prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = {\n      Data: node\n    };\n  }\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbn = {};\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n  return pbn;\n}\nexport function validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nexport function createNode(data, links = []) {\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nexport function createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}","map":{"version":3,"names":["CID","pbNodeProperties","pbLinkProperties","textEncoder","TextEncoder","linkComparator","a","b","abuf","Name","encode","bbuf","x","length","y","i","len","Math","min","hasOnlyProperties","node","properties","Object","keys","some","p","includes","asLink","link","asCID","Hash","TypeError","Array","isArray","pbl","cid","parse","Uint8Array","decode","e","message","Tsize","prepare","Data","pbn","undefined","Links","map","sort","validate","createNode","data","links","createLink","name","size"],"sources":["/Users/shepher/Downloads/filename-space/node_modules/@ipld/dag-pb/esm/src/util.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nconst pbNodeProperties = [\n  'Data',\n  'Links'\n];\nconst pbLinkProperties = [\n  'Hash',\n  'Name',\n  'Tsize'\n];\nconst textEncoder = new TextEncoder();\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n  return x < y ? -1 : y < x ? 1 : 0;\n}\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link);\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n    return { Hash };\n  }\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbl = {};\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash);\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${ e.message }`);\n    }\n    if (cid) {\n      pbl.Hash = cid;\n    }\n  }\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n  return pbl;\n}\nexport function prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node };\n  }\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbn = {};\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n  return pbn;\n}\nexport function validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nexport function createNode(data, links = []) {\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nexport function createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}